/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Sat Mar  3 13:02:55 PST 2018
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbGCD.h"


/* String declarations */
static std::string const __str_literal_2("ERROR", 5u);
static std::string const __str_literal_3("gcd.result()= %d", 16u);
static std::string const __str_literal_1("gcd.start(%d, %d)", 17u);


/* Constructor */
MOD_mkTbGCD::MOD_mkTbGCD(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_c1(simHdl, "c1", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_c2(simHdl, "c2", this, 7u, (tUInt8)0u, (tUInt8)0u),
    INST_gcd_bz(simHdl, "gcd_bz", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_gcd_x(simHdl, "gcd_x", this, 32u, 0u, (tUInt8)0u),
    INST_gcd_y(simHdl, "gcd_y", this, 32u, 0u, (tUInt8)0u),
    INST_state(simHdl, "state", this, 32u, 4294967295u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 26u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbGCD::init_symbols_0()
{
  init_symbol(&symbols[0u], "b__h566", SYM_DEF, &DEF_b__h566, 7u);
  init_symbol(&symbols[1u], "CAN_FIRE_RL_bounce", SYM_DEF, &DEF_CAN_FIRE_RL_bounce, 1u);
  init_symbol(&symbols[2u], "CAN_FIRE_RL_gcd_subtract", SYM_DEF, &DEF_CAN_FIRE_RL_gcd_subtract, 1u);
  init_symbol(&symbols[3u], "CAN_FIRE_RL_init", SYM_DEF, &DEF_CAN_FIRE_RL_init, 1u);
  init_symbol(&symbols[4u], "CAN_FIRE_RL_req", SYM_DEF, &DEF_CAN_FIRE_RL_req, 1u);
  init_symbol(&symbols[5u], "CAN_FIRE_RL_resp", SYM_DEF, &DEF_CAN_FIRE_RL_resp, 1u);
  init_symbol(&symbols[6u], "CAN_FIRE_RL_terminate", SYM_DEF, &DEF_CAN_FIRE_RL_terminate, 1u);
  init_symbol(&symbols[7u], "c1", SYM_MODULE, &INST_c1);
  init_symbol(&symbols[8u], "c2", SYM_MODULE, &INST_c2);
  init_symbol(&symbols[9u], "gcd_bz", SYM_MODULE, &INST_gcd_bz);
  init_symbol(&symbols[10u], "gcd_bz__h760", SYM_DEF, &DEF_gcd_bz__h760, 1u);
  init_symbol(&symbols[11u], "gcd_x", SYM_MODULE, &INST_gcd_x);
  init_symbol(&symbols[12u], "gcd_y", SYM_MODULE, &INST_gcd_y);
  init_symbol(&symbols[13u], "RL_bounce", SYM_RULE);
  init_symbol(&symbols[14u], "RL_gcd_subtract", SYM_RULE);
  init_symbol(&symbols[15u], "RL_init", SYM_RULE);
  init_symbol(&symbols[16u], "RL_req", SYM_RULE);
  init_symbol(&symbols[17u], "RL_resp", SYM_RULE);
  init_symbol(&symbols[18u], "RL_terminate", SYM_RULE);
  init_symbol(&symbols[19u], "state", SYM_MODULE, &INST_state);
  init_symbol(&symbols[20u], "WILL_FIRE_RL_bounce", SYM_DEF, &DEF_WILL_FIRE_RL_bounce, 1u);
  init_symbol(&symbols[21u],
	      "WILL_FIRE_RL_gcd_subtract",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_gcd_subtract,
	      1u);
  init_symbol(&symbols[22u], "WILL_FIRE_RL_init", SYM_DEF, &DEF_WILL_FIRE_RL_init, 1u);
  init_symbol(&symbols[23u], "WILL_FIRE_RL_req", SYM_DEF, &DEF_WILL_FIRE_RL_req, 1u);
  init_symbol(&symbols[24u], "WILL_FIRE_RL_resp", SYM_DEF, &DEF_WILL_FIRE_RL_resp, 1u);
  init_symbol(&symbols[25u], "WILL_FIRE_RL_terminate", SYM_DEF, &DEF_WILL_FIRE_RL_terminate, 1u);
}


/* Rule actions */

void MOD_mkTbGCD::RL_gcd_subtract()
{
  tUInt32 DEF_gcd_x_MINUS_gcd_y___d7;
  tUInt32 DEF_gcd_y_MINUS_gcd_x___d5;
  tUInt8 DEF_gcd_x_SLE_gcd_y___d4;
  tUInt8 DEF_NOT_gcd_x_SLE_gcd_y___d6;
  tUInt8 DEF_gcd_x_EQ_0_OR_gcd_y_EQ_0___d10;
  DEF_b__h293 = INST_gcd_y.METH_read();
  DEF_b__h292 = INST_gcd_x.METH_read();
  DEF_gcd_x_EQ_0___d8 = DEF_b__h292 == 0u;
  DEF_gcd_x_EQ_0_OR_gcd_y_EQ_0___d10 = DEF_gcd_x_EQ_0___d8 || DEF_b__h293 == 0u;
  DEF_gcd_x_SLE_gcd_y___d4 = primSLE8(1u, 32u, (tUInt32)(DEF_b__h292), 32u, (tUInt32)(DEF_b__h293));
  DEF_NOT_gcd_x_SLE_gcd_y___d6 = !DEF_gcd_x_SLE_gcd_y___d4;
  DEF_gcd_y_MINUS_gcd_x___d5 = DEF_b__h293 - DEF_b__h292;
  DEF_gcd_x_MINUS_gcd_y___d7 = DEF_b__h292 - DEF_b__h293;
  if (DEF_gcd_x_SLE_gcd_y___d4)
    INST_gcd_y.METH_write(DEF_gcd_y_MINUS_gcd_x___d5);
  if (DEF_NOT_gcd_x_SLE_gcd_y___d6)
    INST_gcd_x.METH_write(DEF_gcd_x_MINUS_gcd_y___d7);
  if (DEF_gcd_x_EQ_0_OR_gcd_y_EQ_0___d10)
    INST_gcd_bz.METH_write((tUInt8)0u);
}

void MOD_mkTbGCD::RL_init()
{
  INST_state.METH_write(0u);
}

void MOD_mkTbGCD::RL_req()
{
  tUInt32 DEF_SEXT_c1_6___d20;
  tUInt32 DEF_SEXT_c2_8___d23;
  tUInt8 DEF_NOT_SEXT_c1_6_0_SLE_0_1_2_AND_NOT_SEXT_c2_8_3__ETC___d26;
  tUInt8 DEF_SEXT_c2_8_3_SLE_0___d24;
  tUInt8 DEF_SEXT_c1_6_0_SLE_0___d21;
  tUInt8 DEF_SEXT_c1_6_0_SLE_0_1_OR_SEXT_c2_8_3_SLE_0_4___d27;
  tUInt8 DEF_signed_c1_6___d17;
  tUInt8 DEF_signed_c2_8___d19;
  DEF_b__h566 = INST_c2.METH_read();
  DEF_signed_c2_8___d19 = DEF_b__h566;
  DEF_b__h563 = INST_c1.METH_read();
  DEF_signed_c1_6___d17 = DEF_b__h563;
  DEF_SEXT_c2_8___d23 = primSignExt32(32u, 7u, (tUInt8)(DEF_b__h566));
  DEF_SEXT_c2_8_3_SLE_0___d24 = primSLE8(1u, 32u, (tUInt32)(DEF_SEXT_c2_8___d23), 32u, 0u);
  DEF_SEXT_c1_6___d20 = primSignExt32(32u, 4u, (tUInt8)(DEF_b__h563));
  DEF_SEXT_c1_6_0_SLE_0___d21 = primSLE8(1u, 32u, (tUInt32)(DEF_SEXT_c1_6___d20), 32u, 0u);
  DEF_SEXT_c1_6_0_SLE_0_1_OR_SEXT_c2_8_3_SLE_0_4___d27 = DEF_SEXT_c1_6_0_SLE_0___d21 || DEF_SEXT_c2_8_3_SLE_0___d24;
  DEF_NOT_SEXT_c1_6_0_SLE_0_1_2_AND_NOT_SEXT_c2_8_3__ETC___d26 = !DEF_SEXT_c1_6_0_SLE_0___d21 && !DEF_SEXT_c2_8_3_SLE_0___d24;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,-4,-7",
		   &__str_literal_1,
		   DEF_signed_c1_6___d17,
		   DEF_signed_c2_8___d19);
  INST_gcd_bz.METH_write(DEF_NOT_SEXT_c1_6_0_SLE_0_1_2_AND_NOT_SEXT_c2_8_3__ETC___d26);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_SEXT_c1_6_0_SLE_0_1_OR_SEXT_c2_8_3_SLE_0_4___d27)
      dollar_display(sim_hdl, this, "s", &__str_literal_2);
  if (DEF_NOT_SEXT_c1_6_0_SLE_0_1_2_AND_NOT_SEXT_c2_8_3__ETC___d26)
    INST_gcd_x.METH_write(DEF_SEXT_c1_6___d20);
  if (DEF_NOT_SEXT_c1_6_0_SLE_0_1_2_AND_NOT_SEXT_c2_8_3__ETC___d26)
    INST_gcd_y.METH_write(DEF_SEXT_c2_8___d23);
  INST_state.METH_write(1u);
}

void MOD_mkTbGCD::RL_resp()
{
  tUInt8 DEF_c2_8_PLUS_1___d38;
  tUInt8 DEF_NOT_gcd_bz_3_AND_c1_6_EQ_7_4___d37;
  tUInt8 DEF_c1_6_EQ_7___d34;
  tUInt8 DEF_IF_c1_6_EQ_7_4_THEN_0_ELSE_c1_6_PLUS_1_5___d36;
  tUInt32 DEF_IF_gcd_bz_THEN_2_ELSE_0___d31;
  tUInt32 DEF_signed_IF_gcd_x_EQ_0_THEN_gcd_y_ELSE_gcd_x_2___d33;
  DEF_gcd_bz__h760 = INST_gcd_bz.METH_read();
  DEF_b__h566 = INST_c2.METH_read();
  DEF_b__h563 = INST_c1.METH_read();
  DEF_b__h293 = INST_gcd_y.METH_read();
  DEF_b__h292 = INST_gcd_x.METH_read();
  DEF_gcd_x_EQ_0___d8 = DEF_b__h292 == 0u;
  DEF_signed_IF_gcd_x_EQ_0_THEN_gcd_y_ELSE_gcd_x_2___d33 = DEF_gcd_x_EQ_0___d8 ? DEF_b__h293 : DEF_b__h292;
  DEF_IF_gcd_bz_THEN_2_ELSE_0___d31 = DEF_gcd_bz__h760 ? 2u : 0u;
  DEF_c1_6_EQ_7___d34 = DEF_b__h563 == (tUInt8)7u;
  DEF_IF_c1_6_EQ_7_4_THEN_0_ELSE_c1_6_PLUS_1_5___d36 = DEF_c1_6_EQ_7___d34 ? (tUInt8)0u : (tUInt8)15u & (DEF_b__h563 + (tUInt8)1u);
  DEF_NOT_gcd_bz___d13 = !DEF_gcd_bz__h760;
  DEF_NOT_gcd_bz_3_AND_c1_6_EQ_7_4___d37 = DEF_NOT_gcd_bz___d13 && DEF_c1_6_EQ_7___d34;
  DEF_c2_8_PLUS_1___d38 = (tUInt8)127u & (DEF_b__h566 + (tUInt8)1u);
  INST_state.METH_write(DEF_IF_gcd_bz_THEN_2_ELSE_0___d31);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_gcd_bz___d13)
      dollar_display(sim_hdl,
		     this,
		     "s,-32",
		     &__str_literal_3,
		     DEF_signed_IF_gcd_x_EQ_0_THEN_gcd_y_ELSE_gcd_x_2___d33);
  if (DEF_NOT_gcd_bz___d13)
    INST_c1.METH_write(DEF_IF_c1_6_EQ_7_4_THEN_0_ELSE_c1_6_PLUS_1_5___d36);
  if (DEF_NOT_gcd_bz_3_AND_c1_6_EQ_7_4___d37)
    INST_c2.METH_write(DEF_c2_8_PLUS_1___d38);
}

void MOD_mkTbGCD::RL_bounce()
{
  INST_state.METH_write(1u);
}

void MOD_mkTbGCD::RL_terminate()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 0u);
}


/* Methods */


/* Reset routines */

void MOD_mkTbGCD::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_state.reset_RST(ARG_rst_in);
  INST_gcd_y.reset_RST(ARG_rst_in);
  INST_gcd_x.reset_RST(ARG_rst_in);
  INST_gcd_bz.reset_RST(ARG_rst_in);
  INST_c2.reset_RST(ARG_rst_in);
  INST_c1.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbGCD::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbGCD::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_c1.dump_state(indent + 2u);
  INST_c2.dump_state(indent + 2u);
  INST_gcd_bz.dump_state(indent + 2u);
  INST_gcd_x.dump_state(indent + 2u);
  INST_gcd_y.dump_state(indent + 2u);
  INST_state.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbGCD::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 26u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_bounce", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_gcd_subtract", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_init", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_req", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_resp", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_terminate", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_gcd_bz___d13", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_bounce", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_gcd_subtract", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_init", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_req", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_resp", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_terminate", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h292", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h293", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h563", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h566", 7u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "gcd_bz__h760", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "gcd_x_EQ_0___d8", 1u);
  num = INST_c1.dump_VCD_defs(num);
  num = INST_c2.dump_VCD_defs(num);
  num = INST_gcd_bz.dump_VCD_defs(num);
  num = INST_gcd_x.dump_VCD_defs(num);
  num = INST_gcd_y.dump_VCD_defs(num);
  num = INST_state.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbGCD::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbGCD &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbGCD::vcd_defs(tVCDDumpType dt, MOD_mkTbGCD &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 7u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_bounce) != DEF_CAN_FIRE_RL_bounce)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_bounce, 1u);
	backing.DEF_CAN_FIRE_RL_bounce = DEF_CAN_FIRE_RL_bounce;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_gcd_subtract) != DEF_CAN_FIRE_RL_gcd_subtract)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_gcd_subtract, 1u);
	backing.DEF_CAN_FIRE_RL_gcd_subtract = DEF_CAN_FIRE_RL_gcd_subtract;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_init) != DEF_CAN_FIRE_RL_init)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_init, 1u);
	backing.DEF_CAN_FIRE_RL_init = DEF_CAN_FIRE_RL_init;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_req) != DEF_CAN_FIRE_RL_req)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_req, 1u);
	backing.DEF_CAN_FIRE_RL_req = DEF_CAN_FIRE_RL_req;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_resp) != DEF_CAN_FIRE_RL_resp)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_resp, 1u);
	backing.DEF_CAN_FIRE_RL_resp = DEF_CAN_FIRE_RL_resp;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_terminate) != DEF_CAN_FIRE_RL_terminate)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_terminate, 1u);
	backing.DEF_CAN_FIRE_RL_terminate = DEF_CAN_FIRE_RL_terminate;
      }
      ++num;
      if ((backing.DEF_NOT_gcd_bz___d13) != DEF_NOT_gcd_bz___d13)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_gcd_bz___d13, 1u);
	backing.DEF_NOT_gcd_bz___d13 = DEF_NOT_gcd_bz___d13;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_bounce) != DEF_WILL_FIRE_RL_bounce)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_bounce, 1u);
	backing.DEF_WILL_FIRE_RL_bounce = DEF_WILL_FIRE_RL_bounce;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_gcd_subtract) != DEF_WILL_FIRE_RL_gcd_subtract)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_gcd_subtract, 1u);
	backing.DEF_WILL_FIRE_RL_gcd_subtract = DEF_WILL_FIRE_RL_gcd_subtract;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_init) != DEF_WILL_FIRE_RL_init)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_init, 1u);
	backing.DEF_WILL_FIRE_RL_init = DEF_WILL_FIRE_RL_init;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_req) != DEF_WILL_FIRE_RL_req)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_req, 1u);
	backing.DEF_WILL_FIRE_RL_req = DEF_WILL_FIRE_RL_req;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_resp) != DEF_WILL_FIRE_RL_resp)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_resp, 1u);
	backing.DEF_WILL_FIRE_RL_resp = DEF_WILL_FIRE_RL_resp;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_terminate) != DEF_WILL_FIRE_RL_terminate)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_terminate, 1u);
	backing.DEF_WILL_FIRE_RL_terminate = DEF_WILL_FIRE_RL_terminate;
      }
      ++num;
      if ((backing.DEF_b__h292) != DEF_b__h292)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h292, 32u);
	backing.DEF_b__h292 = DEF_b__h292;
      }
      ++num;
      if ((backing.DEF_b__h293) != DEF_b__h293)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h293, 32u);
	backing.DEF_b__h293 = DEF_b__h293;
      }
      ++num;
      if ((backing.DEF_b__h563) != DEF_b__h563)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h563, 4u);
	backing.DEF_b__h563 = DEF_b__h563;
      }
      ++num;
      if ((backing.DEF_b__h566) != DEF_b__h566)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h566, 7u);
	backing.DEF_b__h566 = DEF_b__h566;
      }
      ++num;
      if ((backing.DEF_gcd_bz__h760) != DEF_gcd_bz__h760)
      {
	vcd_write_val(sim_hdl, num, DEF_gcd_bz__h760, 1u);
	backing.DEF_gcd_bz__h760 = DEF_gcd_bz__h760;
      }
      ++num;
      if ((backing.DEF_gcd_x_EQ_0___d8) != DEF_gcd_x_EQ_0___d8)
      {
	vcd_write_val(sim_hdl, num, DEF_gcd_x_EQ_0___d8, 1u);
	backing.DEF_gcd_x_EQ_0___d8 = DEF_gcd_x_EQ_0___d8;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_bounce, 1u);
      backing.DEF_CAN_FIRE_RL_bounce = DEF_CAN_FIRE_RL_bounce;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_gcd_subtract, 1u);
      backing.DEF_CAN_FIRE_RL_gcd_subtract = DEF_CAN_FIRE_RL_gcd_subtract;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_init, 1u);
      backing.DEF_CAN_FIRE_RL_init = DEF_CAN_FIRE_RL_init;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_req, 1u);
      backing.DEF_CAN_FIRE_RL_req = DEF_CAN_FIRE_RL_req;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_resp, 1u);
      backing.DEF_CAN_FIRE_RL_resp = DEF_CAN_FIRE_RL_resp;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_terminate, 1u);
      backing.DEF_CAN_FIRE_RL_terminate = DEF_CAN_FIRE_RL_terminate;
      vcd_write_val(sim_hdl, num++, DEF_NOT_gcd_bz___d13, 1u);
      backing.DEF_NOT_gcd_bz___d13 = DEF_NOT_gcd_bz___d13;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_bounce, 1u);
      backing.DEF_WILL_FIRE_RL_bounce = DEF_WILL_FIRE_RL_bounce;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_gcd_subtract, 1u);
      backing.DEF_WILL_FIRE_RL_gcd_subtract = DEF_WILL_FIRE_RL_gcd_subtract;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_init, 1u);
      backing.DEF_WILL_FIRE_RL_init = DEF_WILL_FIRE_RL_init;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_req, 1u);
      backing.DEF_WILL_FIRE_RL_req = DEF_WILL_FIRE_RL_req;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_resp, 1u);
      backing.DEF_WILL_FIRE_RL_resp = DEF_WILL_FIRE_RL_resp;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_terminate, 1u);
      backing.DEF_WILL_FIRE_RL_terminate = DEF_WILL_FIRE_RL_terminate;
      vcd_write_val(sim_hdl, num++, DEF_b__h292, 32u);
      backing.DEF_b__h292 = DEF_b__h292;
      vcd_write_val(sim_hdl, num++, DEF_b__h293, 32u);
      backing.DEF_b__h293 = DEF_b__h293;
      vcd_write_val(sim_hdl, num++, DEF_b__h563, 4u);
      backing.DEF_b__h563 = DEF_b__h563;
      vcd_write_val(sim_hdl, num++, DEF_b__h566, 7u);
      backing.DEF_b__h566 = DEF_b__h566;
      vcd_write_val(sim_hdl, num++, DEF_gcd_bz__h760, 1u);
      backing.DEF_gcd_bz__h760 = DEF_gcd_bz__h760;
      vcd_write_val(sim_hdl, num++, DEF_gcd_x_EQ_0___d8, 1u);
      backing.DEF_gcd_x_EQ_0___d8 = DEF_gcd_x_EQ_0___d8;
    }
}

void MOD_mkTbGCD::vcd_prims(tVCDDumpType dt, MOD_mkTbGCD &backing)
{
  INST_c1.dump_VCD(dt, backing.INST_c1);
  INST_c2.dump_VCD(dt, backing.INST_c2);
  INST_gcd_bz.dump_VCD(dt, backing.INST_gcd_bz);
  INST_gcd_x.dump_VCD(dt, backing.INST_gcd_x);
  INST_gcd_y.dump_VCD(dt, backing.INST_gcd_y);
  INST_state.dump_VCD(dt, backing.INST_state);
}
