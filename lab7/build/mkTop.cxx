/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Sat Mar 10 14:17:59 PST 2018
 * 
 */
#include "bluesim_primitives.h"
#include "mkTop.h"


/* Constructor */
MOD_mkTop::MOD_mkTop(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_adderRequestFIFO(simHdl, "adderRequestFIFO", this, 65u, 1u, 1u, 0u),
    INST_adderResponseFIFO(simHdl, "adderResponseFIFO", this, 33u, 1u, 1u, 0u),
    INST_countGCDOpers(simHdl, "countGCDOpers", this, 16u, 0u, (tUInt8)0u),
    INST_countIntOpers(simHdl, "countIntOpers", this, 16u, 0u, (tUInt8)0u),
    INST_gcdRequestFIFO(simHdl, "gcdRequestFIFO", this, 65u, 4u, 1u, 0u),
    INST_gcdResponseFIFO(simHdl, "gcdResponseFIFO", this, 33u, 1u, 1u, 0u),
    INST_gcd_input_valid(simHdl, "gcd_input_valid", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_gcd_output_valid(simHdl, "gcd_output_valid", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_gcd_x(simHdl, "gcd_x", this, 32u, 0u, (tUInt8)0u),
    INST_gcd_y(simHdl, "gcd_y", this, 32u, 0u, (tUInt8)0u),
    INST_inputFIFO(simHdl, "inputFIFO", this, 65u, 1u, 1u, 0u),
    INST_intAdder(simHdl, "intAdder", this),
    INST_outputFIFO(simHdl, "outputFIFO", this, 33u, 1u, 1u, 0u),
    PORT_RST_N((tUInt8)1u),
    DEF_inputFIFO_first____d19(65u),
    DEF_gcdRequestFIFO_first____d38(65u),
    DEF_adderRequestFIFO_first____d33(65u)
{
  PORT_EN_request = false;
  PORT_EN_response = false;
  PORT_request_req.setSize(65u);
  PORT_request_req.clear();
  PORT_RDY_request = false;
  PORT_response = 0llu;
  PORT_RDY_response = false;
  PORT_getCounts = 0u;
  PORT_RDY_getCounts = false;
  symbol_count = 61u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTop::init_symbols_0()
{
  init_symbol(&symbols[0u], "adderRequestFIFO", SYM_MODULE, &INST_adderRequestFIFO);
  init_symbol(&symbols[1u], "adderResponseFIFO", SYM_MODULE, &INST_adderResponseFIFO);
  init_symbol(&symbols[2u], "CAN_FIRE_getCounts", SYM_DEF, &DEF_CAN_FIRE_getCounts, 1u);
  init_symbol(&symbols[3u], "CAN_FIRE_RL_five", SYM_DEF, &DEF_CAN_FIRE_RL_five, 1u);
  init_symbol(&symbols[4u], "CAN_FIRE_RL_four", SYM_DEF, &DEF_CAN_FIRE_RL_four, 1u);
  init_symbol(&symbols[5u], "CAN_FIRE_RL_gcd_stop", SYM_DEF, &DEF_CAN_FIRE_RL_gcd_stop, 1u);
  init_symbol(&symbols[6u], "CAN_FIRE_RL_gcd_subtract", SYM_DEF, &DEF_CAN_FIRE_RL_gcd_subtract, 1u);
  init_symbol(&symbols[7u], "CAN_FIRE_RL_gcd_swap", SYM_DEF, &DEF_CAN_FIRE_RL_gcd_swap, 1u);
  init_symbol(&symbols[8u], "CAN_FIRE_RL_one", SYM_DEF, &DEF_CAN_FIRE_RL_one, 1u);
  init_symbol(&symbols[9u], "CAN_FIRE_RL_oneb", SYM_DEF, &DEF_CAN_FIRE_RL_oneb, 1u);
  init_symbol(&symbols[10u], "CAN_FIRE_RL_seven", SYM_DEF, &DEF_CAN_FIRE_RL_seven, 1u);
  init_symbol(&symbols[11u], "CAN_FIRE_RL_six", SYM_DEF, &DEF_CAN_FIRE_RL_six, 1u);
  init_symbol(&symbols[12u], "CAN_FIRE_RL_three", SYM_DEF, &DEF_CAN_FIRE_RL_three, 1u);
  init_symbol(&symbols[13u], "CAN_FIRE_RL_two", SYM_DEF, &DEF_CAN_FIRE_RL_two, 1u);
  init_symbol(&symbols[14u], "CAN_FIRE_request", SYM_DEF, &DEF_CAN_FIRE_request, 1u);
  init_symbol(&symbols[15u], "CAN_FIRE_response", SYM_DEF, &DEF_CAN_FIRE_response, 1u);
  init_symbol(&symbols[16u], "countGCDOpers", SYM_MODULE, &INST_countGCDOpers);
  init_symbol(&symbols[17u], "countIntOpers", SYM_MODULE, &INST_countIntOpers);
  init_symbol(&symbols[18u], "EN_request", SYM_PORT, &PORT_EN_request, 1u);
  init_symbol(&symbols[19u], "EN_response", SYM_PORT, &PORT_EN_response, 1u);
  init_symbol(&symbols[20u], "finalR_res__h1412", SYM_DEF, &DEF_finalR_res__h1412, 32u);
  init_symbol(&symbols[21u], "finalR_res__h1416", SYM_DEF, &DEF_finalR_res__h1416, 32u);
  init_symbol(&symbols[22u], "gcd_input_valid", SYM_MODULE, &INST_gcd_input_valid);
  init_symbol(&symbols[23u], "gcd_output_valid", SYM_MODULE, &INST_gcd_output_valid);
  init_symbol(&symbols[24u], "gcd_x", SYM_MODULE, &INST_gcd_x);
  init_symbol(&symbols[25u], "gcd_y", SYM_MODULE, &INST_gcd_y);
  init_symbol(&symbols[26u], "gcdRequestFIFO", SYM_MODULE, &INST_gcdRequestFIFO);
  init_symbol(&symbols[27u], "gcdResponseFIFO", SYM_MODULE, &INST_gcdResponseFIFO);
  init_symbol(&symbols[28u], "getCounts", SYM_PORT, &PORT_getCounts, 32u);
  init_symbol(&symbols[29u], "inputFIFO", SYM_MODULE, &INST_inputFIFO);
  init_symbol(&symbols[30u], "intAdder", SYM_MODULE, &INST_intAdder);
  init_symbol(&symbols[31u], "outputFIFO", SYM_MODULE, &INST_outputFIFO);
  init_symbol(&symbols[32u], "RDY_getCounts", SYM_PORT, &PORT_RDY_getCounts, 1u);
  init_symbol(&symbols[33u], "RDY_request", SYM_PORT, &PORT_RDY_request, 1u);
  init_symbol(&symbols[34u], "RDY_response", SYM_PORT, &PORT_RDY_response, 1u);
  init_symbol(&symbols[35u], "RL_five", SYM_RULE);
  init_symbol(&symbols[36u], "RL_four", SYM_RULE);
  init_symbol(&symbols[37u], "RL_gcd_stop", SYM_RULE);
  init_symbol(&symbols[38u], "RL_gcd_subtract", SYM_RULE);
  init_symbol(&symbols[39u], "RL_gcd_swap", SYM_RULE);
  init_symbol(&symbols[40u], "RL_one", SYM_RULE);
  init_symbol(&symbols[41u], "RL_oneb", SYM_RULE);
  init_symbol(&symbols[42u], "RL_seven", SYM_RULE);
  init_symbol(&symbols[43u], "RL_six", SYM_RULE);
  init_symbol(&symbols[44u], "RL_three", SYM_RULE);
  init_symbol(&symbols[45u], "RL_two", SYM_RULE);
  init_symbol(&symbols[46u], "request_req", SYM_PORT, &PORT_request_req, 65u);
  init_symbol(&symbols[47u], "response", SYM_PORT, &PORT_response, 33u);
  init_symbol(&symbols[48u], "WILL_FIRE_RL_five", SYM_DEF, &DEF_WILL_FIRE_RL_five, 1u);
  init_symbol(&symbols[49u], "WILL_FIRE_RL_four", SYM_DEF, &DEF_WILL_FIRE_RL_four, 1u);
  init_symbol(&symbols[50u], "WILL_FIRE_RL_gcd_stop", SYM_DEF, &DEF_WILL_FIRE_RL_gcd_stop, 1u);
  init_symbol(&symbols[51u],
	      "WILL_FIRE_RL_gcd_subtract",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_gcd_subtract,
	      1u);
  init_symbol(&symbols[52u], "WILL_FIRE_RL_gcd_swap", SYM_DEF, &DEF_WILL_FIRE_RL_gcd_swap, 1u);
  init_symbol(&symbols[53u], "WILL_FIRE_RL_one", SYM_DEF, &DEF_WILL_FIRE_RL_one, 1u);
  init_symbol(&symbols[54u], "WILL_FIRE_RL_oneb", SYM_DEF, &DEF_WILL_FIRE_RL_oneb, 1u);
  init_symbol(&symbols[55u], "WILL_FIRE_RL_seven", SYM_DEF, &DEF_WILL_FIRE_RL_seven, 1u);
  init_symbol(&symbols[56u], "WILL_FIRE_RL_six", SYM_DEF, &DEF_WILL_FIRE_RL_six, 1u);
  init_symbol(&symbols[57u], "WILL_FIRE_RL_three", SYM_DEF, &DEF_WILL_FIRE_RL_three, 1u);
  init_symbol(&symbols[58u], "WILL_FIRE_RL_two", SYM_DEF, &DEF_WILL_FIRE_RL_two, 1u);
  init_symbol(&symbols[59u], "WILL_FIRE_request", SYM_DEF, &DEF_WILL_FIRE_request, 1u);
  init_symbol(&symbols[60u], "WILL_FIRE_response", SYM_DEF, &DEF_WILL_FIRE_response, 1u);
}


/* Rule actions */

void MOD_mkTop::RL_gcd_swap()
{
  DEF_finalR_res__h1412 = INST_gcd_y.METH_read();
  DEF_finalR_res__h1416 = INST_gcd_x.METH_read();
  INST_gcd_y.METH_write(DEF_finalR_res__h1416);
  INST_gcd_x.METH_write(DEF_finalR_res__h1412);
}

void MOD_mkTop::RL_gcd_subtract()
{
  tUInt32 DEF_x__h834;
  DEF_finalR_res__h1412 = INST_gcd_y.METH_read();
  DEF_finalR_res__h1416 = INST_gcd_x.METH_read();
  DEF_x__h834 = DEF_finalR_res__h1416 - DEF_finalR_res__h1412;
  INST_gcd_x.METH_write(DEF_x__h834);
}

void MOD_mkTop::RL_gcd_stop()
{
  INST_gcd_output_valid.METH_write((tUInt8)1u);
}

void MOD_mkTop::RL_one()
{
  tUInt32 DEF_x__h1019;
  DEF_inputFIFO_first____d19 = INST_inputFIFO.METH_first();
  DEF_x__h1635 = INST_countIntOpers.METH_read();
  DEF_x__h1019 = 65535u & (DEF_x__h1635 + 1u);
  INST_adderRequestFIFO.METH_enq(DEF_inputFIFO_first____d19);
  INST_countIntOpers.METH_write(DEF_x__h1019);
  INST_inputFIFO.METH_deq();
}

void MOD_mkTop::RL_oneb()
{
  tUInt32 DEF_x__h1108;
  DEF_inputFIFO_first____d19 = INST_inputFIFO.METH_first();
  DEF_x__h1638 = INST_countGCDOpers.METH_read();
  DEF_x__h1108 = 65535u & (DEF_x__h1638 + 1u);
  INST_gcdRequestFIFO.METH_enq(DEF_inputFIFO_first____d19);
  INST_countGCDOpers.METH_write(DEF_x__h1108);
  INST_inputFIFO.METH_deq();
}

void MOD_mkTop::RL_two()
{
  DEF_adderRequestFIFO_first____d33 = INST_adderRequestFIFO.METH_first();
  INST_intAdder.METH_request(DEF_adderRequestFIFO_first____d33);
  INST_adderRequestFIFO.METH_deq();
}

void MOD_mkTop::RL_three()
{
  tUInt32 DEF_x__h1261;
  tUInt32 DEF_x__h1237;
  DEF_gcdRequestFIFO_first____d38 = INST_gcdRequestFIFO.METH_first();
  DEF_x__h1237 = primExtract32(32u, 65u, DEF_gcdRequestFIFO_first____d38, 32u, 64u, 32u, 33u);
  DEF_x__h1261 = primExtract32(32u, 65u, DEF_gcdRequestFIFO_first____d38, 32u, 32u, 32u, 1u);
  INST_gcd_input_valid.METH_write((tUInt8)1u);
  INST_gcd_x.METH_write(DEF_x__h1237);
  INST_gcd_y.METH_write(DEF_x__h1261);
  INST_gcdRequestFIFO.METH_deq();
}

void MOD_mkTop::RL_four()
{
  tUInt64 DEF_intAdder_response___d44;
  tUInt64 DEF_AVMeth_intAdder_response;
  DEF_AVMeth_intAdder_response = INST_intAdder.METH_response();
  DEF_intAdder_response___d44 = DEF_AVMeth_intAdder_response;
  INST_adderResponseFIFO.METH_enq(DEF_intAdder_response___d44);
}

void MOD_mkTop::RL_five()
{
  tUInt64 DEF_IF_gcd_x_EQ_0_THEN_gcd_y_ELSE_gcd_x_7_CONCAT_1___d48;
  DEF_finalR_res__h1412 = INST_gcd_y.METH_read();
  DEF_finalR_res__h1416 = INST_gcd_x.METH_read();
  DEF_gcd_x_EQ_0___d6 = DEF_finalR_res__h1416 == 0u;
  DEF_IF_gcd_x_EQ_0_THEN_gcd_y_ELSE_gcd_x_7_CONCAT_1___d48 = 8589934591llu & ((((tUInt64)(DEF_gcd_x_EQ_0___d6 ? DEF_finalR_res__h1412 : DEF_finalR_res__h1416)) << 1u) | (tUInt64)((tUInt8)1u));
  INST_gcd_output_valid.METH_write((tUInt8)0u);
  INST_gcd_input_valid.METH_write((tUInt8)0u);
  INST_gcdResponseFIFO.METH_enq(DEF_IF_gcd_x_EQ_0_THEN_gcd_y_ELSE_gcd_x_7_CONCAT_1___d48);
}

void MOD_mkTop::RL_six()
{
  tUInt64 DEF_adderResponseFIFO_first____d52;
  DEF_adderResponseFIFO_first____d52 = INST_adderResponseFIFO.METH_first();
  INST_outputFIFO.METH_enq(DEF_adderResponseFIFO_first____d52);
  INST_adderResponseFIFO.METH_deq();
}

void MOD_mkTop::RL_seven()
{
  tUInt64 DEF_gcdResponseFIFO_first____d55;
  DEF_gcdResponseFIFO_first____d55 = INST_gcdResponseFIFO.METH_first();
  INST_gcdResponseFIFO.METH_deq();
  INST_outputFIFO.METH_enq(DEF_gcdResponseFIFO_first____d55);
}


/* Methods */

void MOD_mkTop::METH_request(tUWide ARG_request_req)
{
  PORT_EN_request = (tUInt8)1u;
  DEF_WILL_FIRE_request = (tUInt8)1u;
  PORT_request_req = ARG_request_req;
  INST_inputFIFO.METH_enq(ARG_request_req);
}

tUInt8 MOD_mkTop::METH_RDY_request()
{
  DEF_CAN_FIRE_request = INST_inputFIFO.METH_notFull() && INST_inputFIFO.METH_i_notFull();
  PORT_RDY_request = DEF_CAN_FIRE_request;
  return PORT_RDY_request;
}

tUInt64 MOD_mkTop::METH_response()
{
  tUInt64 DEF_response__avValue1;
  PORT_EN_response = (tUInt8)1u;
  DEF_WILL_FIRE_response = (tUInt8)1u;
  DEF_response__avValue1 = INST_outputFIFO.METH_first();
  PORT_response = DEF_response__avValue1;
  INST_outputFIFO.METH_deq();
  return PORT_response;
}

tUInt8 MOD_mkTop::METH_RDY_response()
{
  DEF_CAN_FIRE_response = INST_outputFIFO.METH_notEmpty() && INST_outputFIFO.METH_i_notEmpty();
  PORT_RDY_response = DEF_CAN_FIRE_response;
  return PORT_RDY_response;
}

tUInt32 MOD_mkTop::METH_getCounts()
{
  DEF_x__h1638 = INST_countGCDOpers.METH_read();
  DEF_x__h1635 = INST_countIntOpers.METH_read();
  PORT_getCounts = (DEF_x__h1635 << 16u) | DEF_x__h1638;
  return PORT_getCounts;
}

tUInt8 MOD_mkTop::METH_RDY_getCounts()
{
  DEF_CAN_FIRE_getCounts = (tUInt8)1u;
  PORT_RDY_getCounts = DEF_CAN_FIRE_getCounts;
  return PORT_RDY_getCounts;
}


/* Reset routines */

void MOD_mkTop::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_outputFIFO.reset_RST(ARG_rst_in);
  INST_intAdder.reset_RST_N(ARG_rst_in);
  INST_inputFIFO.reset_RST(ARG_rst_in);
  INST_gcd_y.reset_RST(ARG_rst_in);
  INST_gcd_x.reset_RST(ARG_rst_in);
  INST_gcd_output_valid.reset_RST(ARG_rst_in);
  INST_gcd_input_valid.reset_RST(ARG_rst_in);
  INST_gcdResponseFIFO.reset_RST(ARG_rst_in);
  INST_gcdRequestFIFO.reset_RST(ARG_rst_in);
  INST_countIntOpers.reset_RST(ARG_rst_in);
  INST_countGCDOpers.reset_RST(ARG_rst_in);
  INST_adderResponseFIFO.reset_RST(ARG_rst_in);
  INST_adderRequestFIFO.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTop::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTop::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_adderRequestFIFO.dump_state(indent + 2u);
  INST_adderResponseFIFO.dump_state(indent + 2u);
  INST_countGCDOpers.dump_state(indent + 2u);
  INST_countIntOpers.dump_state(indent + 2u);
  INST_gcdRequestFIFO.dump_state(indent + 2u);
  INST_gcdResponseFIFO.dump_state(indent + 2u);
  INST_gcd_input_valid.dump_state(indent + 2u);
  INST_gcd_output_valid.dump_state(indent + 2u);
  INST_gcd_x.dump_state(indent + 2u);
  INST_gcd_y.dump_state(indent + 2u);
  INST_inputFIFO.dump_state(indent + 2u);
  INST_intAdder.dump_state(indent + 2u);
  INST_outputFIFO.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTop::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 56u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_five", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_four", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_gcd_stop", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_gcd_subtract", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_gcd_swap", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_one", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_oneb", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_seven", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_six", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_three", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_two", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_getCounts", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_response", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_five", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_four", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_gcd_stop", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_gcd_subtract", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_gcd_swap", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_one", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_oneb", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_seven", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_six", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_three", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_two", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_response", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "adderRequestFIFO_first____d33", 65u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "finalR_res__h1412", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "finalR_res__h1416", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "gcdRequestFIFO_first____d38", 65u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "gcd_x_EQ_0___d6", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "inputFIFO_first____d19", 65u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1635", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1638", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_response", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_getCounts", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_response", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "getCounts", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "request_req", 65u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "response", 33u);
  num = INST_adderRequestFIFO.dump_VCD_defs(num);
  num = INST_adderResponseFIFO.dump_VCD_defs(num);
  num = INST_countGCDOpers.dump_VCD_defs(num);
  num = INST_countIntOpers.dump_VCD_defs(num);
  num = INST_gcdRequestFIFO.dump_VCD_defs(num);
  num = INST_gcdResponseFIFO.dump_VCD_defs(num);
  num = INST_gcd_input_valid.dump_VCD_defs(num);
  num = INST_gcd_output_valid.dump_VCD_defs(num);
  num = INST_gcd_x.dump_VCD_defs(num);
  num = INST_gcd_y.dump_VCD_defs(num);
  num = INST_inputFIFO.dump_VCD_defs(num);
  num = INST_outputFIFO.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_intAdder.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTop::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTop &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkTop::vcd_defs(tVCDDumpType dt, MOD_mkTop &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 65u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 65u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 65u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 65u);
    vcd_write_x(sim_hdl, num++, 33u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_five) != DEF_CAN_FIRE_RL_five)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_five, 1u);
	backing.DEF_CAN_FIRE_RL_five = DEF_CAN_FIRE_RL_five;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_four) != DEF_CAN_FIRE_RL_four)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_four, 1u);
	backing.DEF_CAN_FIRE_RL_four = DEF_CAN_FIRE_RL_four;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_gcd_stop) != DEF_CAN_FIRE_RL_gcd_stop)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_gcd_stop, 1u);
	backing.DEF_CAN_FIRE_RL_gcd_stop = DEF_CAN_FIRE_RL_gcd_stop;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_gcd_subtract) != DEF_CAN_FIRE_RL_gcd_subtract)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_gcd_subtract, 1u);
	backing.DEF_CAN_FIRE_RL_gcd_subtract = DEF_CAN_FIRE_RL_gcd_subtract;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_gcd_swap) != DEF_CAN_FIRE_RL_gcd_swap)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_gcd_swap, 1u);
	backing.DEF_CAN_FIRE_RL_gcd_swap = DEF_CAN_FIRE_RL_gcd_swap;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_one) != DEF_CAN_FIRE_RL_one)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_one, 1u);
	backing.DEF_CAN_FIRE_RL_one = DEF_CAN_FIRE_RL_one;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_oneb) != DEF_CAN_FIRE_RL_oneb)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_oneb, 1u);
	backing.DEF_CAN_FIRE_RL_oneb = DEF_CAN_FIRE_RL_oneb;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_seven) != DEF_CAN_FIRE_RL_seven)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_seven, 1u);
	backing.DEF_CAN_FIRE_RL_seven = DEF_CAN_FIRE_RL_seven;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_six) != DEF_CAN_FIRE_RL_six)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_six, 1u);
	backing.DEF_CAN_FIRE_RL_six = DEF_CAN_FIRE_RL_six;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_three) != DEF_CAN_FIRE_RL_three)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_three, 1u);
	backing.DEF_CAN_FIRE_RL_three = DEF_CAN_FIRE_RL_three;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_two) != DEF_CAN_FIRE_RL_two)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_two, 1u);
	backing.DEF_CAN_FIRE_RL_two = DEF_CAN_FIRE_RL_two;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_getCounts) != DEF_CAN_FIRE_getCounts)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_getCounts, 1u);
	backing.DEF_CAN_FIRE_getCounts = DEF_CAN_FIRE_getCounts;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_request) != DEF_CAN_FIRE_request)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_request, 1u);
	backing.DEF_CAN_FIRE_request = DEF_CAN_FIRE_request;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_response) != DEF_CAN_FIRE_response)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_response, 1u);
	backing.DEF_CAN_FIRE_response = DEF_CAN_FIRE_response;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_five) != DEF_WILL_FIRE_RL_five)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_five, 1u);
	backing.DEF_WILL_FIRE_RL_five = DEF_WILL_FIRE_RL_five;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_four) != DEF_WILL_FIRE_RL_four)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_four, 1u);
	backing.DEF_WILL_FIRE_RL_four = DEF_WILL_FIRE_RL_four;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_gcd_stop) != DEF_WILL_FIRE_RL_gcd_stop)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_gcd_stop, 1u);
	backing.DEF_WILL_FIRE_RL_gcd_stop = DEF_WILL_FIRE_RL_gcd_stop;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_gcd_subtract) != DEF_WILL_FIRE_RL_gcd_subtract)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_gcd_subtract, 1u);
	backing.DEF_WILL_FIRE_RL_gcd_subtract = DEF_WILL_FIRE_RL_gcd_subtract;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_gcd_swap) != DEF_WILL_FIRE_RL_gcd_swap)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_gcd_swap, 1u);
	backing.DEF_WILL_FIRE_RL_gcd_swap = DEF_WILL_FIRE_RL_gcd_swap;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_one) != DEF_WILL_FIRE_RL_one)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_one, 1u);
	backing.DEF_WILL_FIRE_RL_one = DEF_WILL_FIRE_RL_one;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_oneb) != DEF_WILL_FIRE_RL_oneb)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_oneb, 1u);
	backing.DEF_WILL_FIRE_RL_oneb = DEF_WILL_FIRE_RL_oneb;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_seven) != DEF_WILL_FIRE_RL_seven)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_seven, 1u);
	backing.DEF_WILL_FIRE_RL_seven = DEF_WILL_FIRE_RL_seven;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_six) != DEF_WILL_FIRE_RL_six)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_six, 1u);
	backing.DEF_WILL_FIRE_RL_six = DEF_WILL_FIRE_RL_six;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_three) != DEF_WILL_FIRE_RL_three)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_three, 1u);
	backing.DEF_WILL_FIRE_RL_three = DEF_WILL_FIRE_RL_three;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_two) != DEF_WILL_FIRE_RL_two)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_two, 1u);
	backing.DEF_WILL_FIRE_RL_two = DEF_WILL_FIRE_RL_two;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_request) != DEF_WILL_FIRE_request)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_request, 1u);
	backing.DEF_WILL_FIRE_request = DEF_WILL_FIRE_request;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_response) != DEF_WILL_FIRE_response)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_response, 1u);
	backing.DEF_WILL_FIRE_response = DEF_WILL_FIRE_response;
      }
      ++num;
      if ((backing.DEF_adderRequestFIFO_first____d33) != DEF_adderRequestFIFO_first____d33)
      {
	vcd_write_val(sim_hdl, num, DEF_adderRequestFIFO_first____d33, 65u);
	backing.DEF_adderRequestFIFO_first____d33 = DEF_adderRequestFIFO_first____d33;
      }
      ++num;
      if ((backing.DEF_finalR_res__h1412) != DEF_finalR_res__h1412)
      {
	vcd_write_val(sim_hdl, num, DEF_finalR_res__h1412, 32u);
	backing.DEF_finalR_res__h1412 = DEF_finalR_res__h1412;
      }
      ++num;
      if ((backing.DEF_finalR_res__h1416) != DEF_finalR_res__h1416)
      {
	vcd_write_val(sim_hdl, num, DEF_finalR_res__h1416, 32u);
	backing.DEF_finalR_res__h1416 = DEF_finalR_res__h1416;
      }
      ++num;
      if ((backing.DEF_gcdRequestFIFO_first____d38) != DEF_gcdRequestFIFO_first____d38)
      {
	vcd_write_val(sim_hdl, num, DEF_gcdRequestFIFO_first____d38, 65u);
	backing.DEF_gcdRequestFIFO_first____d38 = DEF_gcdRequestFIFO_first____d38;
      }
      ++num;
      if ((backing.DEF_gcd_x_EQ_0___d6) != DEF_gcd_x_EQ_0___d6)
      {
	vcd_write_val(sim_hdl, num, DEF_gcd_x_EQ_0___d6, 1u);
	backing.DEF_gcd_x_EQ_0___d6 = DEF_gcd_x_EQ_0___d6;
      }
      ++num;
      if ((backing.DEF_inputFIFO_first____d19) != DEF_inputFIFO_first____d19)
      {
	vcd_write_val(sim_hdl, num, DEF_inputFIFO_first____d19, 65u);
	backing.DEF_inputFIFO_first____d19 = DEF_inputFIFO_first____d19;
      }
      ++num;
      if ((backing.DEF_x__h1635) != DEF_x__h1635)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1635, 16u);
	backing.DEF_x__h1635 = DEF_x__h1635;
      }
      ++num;
      if ((backing.DEF_x__h1638) != DEF_x__h1638)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1638, 16u);
	backing.DEF_x__h1638 = DEF_x__h1638;
      }
      ++num;
      if ((backing.PORT_EN_request) != PORT_EN_request)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_request, 1u);
	backing.PORT_EN_request = PORT_EN_request;
      }
      ++num;
      if ((backing.PORT_EN_response) != PORT_EN_response)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_response, 1u);
	backing.PORT_EN_response = PORT_EN_response;
      }
      ++num;
      if ((backing.PORT_RDY_getCounts) != PORT_RDY_getCounts)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_getCounts, 1u);
	backing.PORT_RDY_getCounts = PORT_RDY_getCounts;
      }
      ++num;
      if ((backing.PORT_RDY_request) != PORT_RDY_request)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_request, 1u);
	backing.PORT_RDY_request = PORT_RDY_request;
      }
      ++num;
      if ((backing.PORT_RDY_response) != PORT_RDY_response)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_response, 1u);
	backing.PORT_RDY_response = PORT_RDY_response;
      }
      ++num;
      if ((backing.PORT_getCounts) != PORT_getCounts)
      {
	vcd_write_val(sim_hdl, num, PORT_getCounts, 32u);
	backing.PORT_getCounts = PORT_getCounts;
      }
      ++num;
      if ((backing.PORT_request_req) != PORT_request_req)
      {
	vcd_write_val(sim_hdl, num, PORT_request_req, 65u);
	backing.PORT_request_req = PORT_request_req;
      }
      ++num;
      if ((backing.PORT_response) != PORT_response)
      {
	vcd_write_val(sim_hdl, num, PORT_response, 33u);
	backing.PORT_response = PORT_response;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_five, 1u);
      backing.DEF_CAN_FIRE_RL_five = DEF_CAN_FIRE_RL_five;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_four, 1u);
      backing.DEF_CAN_FIRE_RL_four = DEF_CAN_FIRE_RL_four;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_gcd_stop, 1u);
      backing.DEF_CAN_FIRE_RL_gcd_stop = DEF_CAN_FIRE_RL_gcd_stop;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_gcd_subtract, 1u);
      backing.DEF_CAN_FIRE_RL_gcd_subtract = DEF_CAN_FIRE_RL_gcd_subtract;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_gcd_swap, 1u);
      backing.DEF_CAN_FIRE_RL_gcd_swap = DEF_CAN_FIRE_RL_gcd_swap;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_one, 1u);
      backing.DEF_CAN_FIRE_RL_one = DEF_CAN_FIRE_RL_one;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_oneb, 1u);
      backing.DEF_CAN_FIRE_RL_oneb = DEF_CAN_FIRE_RL_oneb;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_seven, 1u);
      backing.DEF_CAN_FIRE_RL_seven = DEF_CAN_FIRE_RL_seven;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_six, 1u);
      backing.DEF_CAN_FIRE_RL_six = DEF_CAN_FIRE_RL_six;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_three, 1u);
      backing.DEF_CAN_FIRE_RL_three = DEF_CAN_FIRE_RL_three;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_two, 1u);
      backing.DEF_CAN_FIRE_RL_two = DEF_CAN_FIRE_RL_two;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_getCounts, 1u);
      backing.DEF_CAN_FIRE_getCounts = DEF_CAN_FIRE_getCounts;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_request, 1u);
      backing.DEF_CAN_FIRE_request = DEF_CAN_FIRE_request;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_response, 1u);
      backing.DEF_CAN_FIRE_response = DEF_CAN_FIRE_response;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_five, 1u);
      backing.DEF_WILL_FIRE_RL_five = DEF_WILL_FIRE_RL_five;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_four, 1u);
      backing.DEF_WILL_FIRE_RL_four = DEF_WILL_FIRE_RL_four;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_gcd_stop, 1u);
      backing.DEF_WILL_FIRE_RL_gcd_stop = DEF_WILL_FIRE_RL_gcd_stop;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_gcd_subtract, 1u);
      backing.DEF_WILL_FIRE_RL_gcd_subtract = DEF_WILL_FIRE_RL_gcd_subtract;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_gcd_swap, 1u);
      backing.DEF_WILL_FIRE_RL_gcd_swap = DEF_WILL_FIRE_RL_gcd_swap;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_one, 1u);
      backing.DEF_WILL_FIRE_RL_one = DEF_WILL_FIRE_RL_one;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_oneb, 1u);
      backing.DEF_WILL_FIRE_RL_oneb = DEF_WILL_FIRE_RL_oneb;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_seven, 1u);
      backing.DEF_WILL_FIRE_RL_seven = DEF_WILL_FIRE_RL_seven;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_six, 1u);
      backing.DEF_WILL_FIRE_RL_six = DEF_WILL_FIRE_RL_six;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_three, 1u);
      backing.DEF_WILL_FIRE_RL_three = DEF_WILL_FIRE_RL_three;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_two, 1u);
      backing.DEF_WILL_FIRE_RL_two = DEF_WILL_FIRE_RL_two;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_request, 1u);
      backing.DEF_WILL_FIRE_request = DEF_WILL_FIRE_request;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_response, 1u);
      backing.DEF_WILL_FIRE_response = DEF_WILL_FIRE_response;
      vcd_write_val(sim_hdl, num++, DEF_adderRequestFIFO_first____d33, 65u);
      backing.DEF_adderRequestFIFO_first____d33 = DEF_adderRequestFIFO_first____d33;
      vcd_write_val(sim_hdl, num++, DEF_finalR_res__h1412, 32u);
      backing.DEF_finalR_res__h1412 = DEF_finalR_res__h1412;
      vcd_write_val(sim_hdl, num++, DEF_finalR_res__h1416, 32u);
      backing.DEF_finalR_res__h1416 = DEF_finalR_res__h1416;
      vcd_write_val(sim_hdl, num++, DEF_gcdRequestFIFO_first____d38, 65u);
      backing.DEF_gcdRequestFIFO_first____d38 = DEF_gcdRequestFIFO_first____d38;
      vcd_write_val(sim_hdl, num++, DEF_gcd_x_EQ_0___d6, 1u);
      backing.DEF_gcd_x_EQ_0___d6 = DEF_gcd_x_EQ_0___d6;
      vcd_write_val(sim_hdl, num++, DEF_inputFIFO_first____d19, 65u);
      backing.DEF_inputFIFO_first____d19 = DEF_inputFIFO_first____d19;
      vcd_write_val(sim_hdl, num++, DEF_x__h1635, 16u);
      backing.DEF_x__h1635 = DEF_x__h1635;
      vcd_write_val(sim_hdl, num++, DEF_x__h1638, 16u);
      backing.DEF_x__h1638 = DEF_x__h1638;
      vcd_write_val(sim_hdl, num++, PORT_EN_request, 1u);
      backing.PORT_EN_request = PORT_EN_request;
      vcd_write_val(sim_hdl, num++, PORT_EN_response, 1u);
      backing.PORT_EN_response = PORT_EN_response;
      vcd_write_val(sim_hdl, num++, PORT_RDY_getCounts, 1u);
      backing.PORT_RDY_getCounts = PORT_RDY_getCounts;
      vcd_write_val(sim_hdl, num++, PORT_RDY_request, 1u);
      backing.PORT_RDY_request = PORT_RDY_request;
      vcd_write_val(sim_hdl, num++, PORT_RDY_response, 1u);
      backing.PORT_RDY_response = PORT_RDY_response;
      vcd_write_val(sim_hdl, num++, PORT_getCounts, 32u);
      backing.PORT_getCounts = PORT_getCounts;
      vcd_write_val(sim_hdl, num++, PORT_request_req, 65u);
      backing.PORT_request_req = PORT_request_req;
      vcd_write_val(sim_hdl, num++, PORT_response, 33u);
      backing.PORT_response = PORT_response;
    }
}

void MOD_mkTop::vcd_prims(tVCDDumpType dt, MOD_mkTop &backing)
{
  INST_adderRequestFIFO.dump_VCD(dt, backing.INST_adderRequestFIFO);
  INST_adderResponseFIFO.dump_VCD(dt, backing.INST_adderResponseFIFO);
  INST_countGCDOpers.dump_VCD(dt, backing.INST_countGCDOpers);
  INST_countIntOpers.dump_VCD(dt, backing.INST_countIntOpers);
  INST_gcdRequestFIFO.dump_VCD(dt, backing.INST_gcdRequestFIFO);
  INST_gcdResponseFIFO.dump_VCD(dt, backing.INST_gcdResponseFIFO);
  INST_gcd_input_valid.dump_VCD(dt, backing.INST_gcd_input_valid);
  INST_gcd_output_valid.dump_VCD(dt, backing.INST_gcd_output_valid);
  INST_gcd_x.dump_VCD(dt, backing.INST_gcd_x);
  INST_gcd_y.dump_VCD(dt, backing.INST_gcd_y);
  INST_inputFIFO.dump_VCD(dt, backing.INST_inputFIFO);
  INST_outputFIFO.dump_VCD(dt, backing.INST_outputFIFO);
}

void MOD_mkTop::vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkTop &backing)
{
  INST_intAdder.dump_VCD(dt, levels, backing.INST_intAdder);
}
