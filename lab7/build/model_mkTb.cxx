/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Sat Mar 10 14:17:59 PST 2018
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkTb.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkTb::MODEL_mkTb()
{
  mkTb_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkTb()
{
  MODEL_mkTb *model = new MODEL_mkTb();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkTb &INST_top = *((MOD_mkTb *)(instance_ptr));
	 tUInt8 DEF_INST_top_INST_top_DEF_gcd_input_valid_AND_NOT_gcd_output_valid___d4;
	 tUInt8 DEF_INST_top_INST_top_DEF_gcd_x_ULT_gcd_y___d10;
	 tUInt8 DEF_INST_top_INST_top_DEF_gcd_input_valid_AND_NOT_gcd_output_valid_AND_N_ETC___d8;
	 tUInt8 DEF_INST_top_INST_top_DEF_NOT_gcd_output_valid___d3;
	 tUInt8 DEF_INST_top_INST_top_DEF_inputFIFO_first__9_BIT_0___d20;
	 tUInt8 DEF_INST_top_INST_top_DEF_inputFIFO_i_notEmpty____d16;
	 tUInt8 DEF_INST_top_INST_top_DEF_outputFIFO_i_notFull____d49;
	 tUInt8 DEF_INST_top_INST_top_DEF_gcd_input_valid__h756;
	 tUInt8 DEF_INST_top_INST_top_DEF_gcd_output_valid__h758;
	 INST_top.INST_top.PORT_EN_response = (tUInt8)0u;
	 INST_top.INST_top.DEF_WILL_FIRE_response = (tUInt8)0u;
	 INST_top.INST_top.PORT_EN_request = (tUInt8)0u;
	 INST_top.INST_top.DEF_WILL_FIRE_request = (tUInt8)0u;
	 INST_top.INST_top.INST_intAdder.PORT_EN_response = (tUInt8)0u;
	 INST_top.INST_top.INST_intAdder.DEF_WILL_FIRE_response = (tUInt8)0u;
	 INST_top.INST_top.INST_intAdder.PORT_EN_request = (tUInt8)0u;
	 INST_top.INST_top.INST_intAdder.DEF_WILL_FIRE_request = (tUInt8)0u;
	 INST_top.DEF_CAN_FIRE_RL_r_count_cycles = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_r_count_cycles = INST_top.DEF_CAN_FIRE_RL_r_count_cycles;
	 INST_top.DEF_x__h5070 = INST_top.INST_resCount.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_r_disp_count = (INST_top.DEF_x__h5070) == 0u;
	 INST_top.DEF_WILL_FIRE_RL_r_disp_count = INST_top.DEF_CAN_FIRE_RL_r_disp_count;
	 INST_top.DEF_CAN_FIRE_RL_r_finish = INST_top.INST_done.METH_read();
	 INST_top.DEF_WILL_FIRE_RL_r_finish = INST_top.DEF_CAN_FIRE_RL_r_finish;
	 INST_top.DEF_CAN_FIRE_RL_r_recv_res = INST_top.INST_top.METH_RDY_response();
	 INST_top.DEF_WILL_FIRE_RL_r_recv_res = INST_top.DEF_CAN_FIRE_RL_r_recv_res;
	 INST_top.DEF_x__h4455 = INST_top.INST_reqCount.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_r_send_req = INST_top.INST_top.METH_RDY_request() && !((INST_top.DEF_x__h4455) == 32u);
	 INST_top.DEF_WILL_FIRE_RL_r_send_req = INST_top.DEF_CAN_FIRE_RL_r_send_req;
	 DEF_INST_top_INST_top_DEF_gcd_output_valid__h758 = INST_top.INST_top.INST_gcd_output_valid.METH_read();
	 INST_top.INST_top.DEF_CAN_FIRE_RL_five = DEF_INST_top_INST_top_DEF_gcd_output_valid__h758 && INST_top.INST_top.INST_gcdResponseFIFO.METH_i_notFull();
	 INST_top.INST_top.DEF_WILL_FIRE_RL_five = INST_top.INST_top.DEF_CAN_FIRE_RL_five;
	 INST_top.INST_top.DEF_CAN_FIRE_RL_four = INST_top.INST_top.INST_intAdder.METH_RDY_response() && INST_top.INST_top.INST_adderResponseFIFO.METH_i_notFull();
	 INST_top.INST_top.DEF_WILL_FIRE_RL_four = INST_top.INST_top.DEF_CAN_FIRE_RL_four;
	 INST_top.INST_top.DEF_finalR_res__h1416 = INST_top.INST_top.INST_gcd_x.METH_read();
	 DEF_INST_top_INST_top_DEF_gcd_input_valid__h756 = INST_top.INST_top.INST_gcd_input_valid.METH_read();
	 INST_top.INST_top.DEF_gcd_x_EQ_0___d6 = (INST_top.INST_top.DEF_finalR_res__h1416) == 0u;
	 DEF_INST_top_INST_top_DEF_NOT_gcd_output_valid___d3 = !DEF_INST_top_INST_top_DEF_gcd_output_valid__h758;
	 DEF_INST_top_INST_top_DEF_gcd_input_valid_AND_NOT_gcd_output_valid___d4 = DEF_INST_top_INST_top_DEF_gcd_input_valid__h756 && DEF_INST_top_INST_top_DEF_NOT_gcd_output_valid___d3;
	 INST_top.INST_top.DEF_CAN_FIRE_RL_gcd_stop = DEF_INST_top_INST_top_DEF_gcd_input_valid_AND_NOT_gcd_output_valid___d4 && INST_top.INST_top.DEF_gcd_x_EQ_0___d6;
	 INST_top.INST_top.DEF_WILL_FIRE_RL_gcd_stop = INST_top.INST_top.DEF_CAN_FIRE_RL_gcd_stop;
	 INST_top.INST_top.DEF_finalR_res__h1412 = INST_top.INST_top.INST_gcd_y.METH_read();
	 DEF_INST_top_INST_top_DEF_gcd_x_ULT_gcd_y___d10 = (INST_top.INST_top.DEF_finalR_res__h1416) < (INST_top.INST_top.DEF_finalR_res__h1412);
	 DEF_INST_top_INST_top_DEF_gcd_input_valid_AND_NOT_gcd_output_valid_AND_N_ETC___d8 = DEF_INST_top_INST_top_DEF_gcd_input_valid_AND_NOT_gcd_output_valid___d4 && !(INST_top.INST_top.DEF_gcd_x_EQ_0___d6);
	 INST_top.INST_top.DEF_CAN_FIRE_RL_gcd_subtract = DEF_INST_top_INST_top_DEF_gcd_input_valid_AND_NOT_gcd_output_valid_AND_N_ETC___d8 && !DEF_INST_top_INST_top_DEF_gcd_x_ULT_gcd_y___d10;
	 INST_top.INST_top.DEF_WILL_FIRE_RL_gcd_subtract = INST_top.INST_top.DEF_CAN_FIRE_RL_gcd_subtract;
	 INST_top.INST_top.DEF_CAN_FIRE_RL_gcd_swap = DEF_INST_top_INST_top_DEF_gcd_input_valid_AND_NOT_gcd_output_valid_AND_N_ETC___d8 && DEF_INST_top_INST_top_DEF_gcd_x_ULT_gcd_y___d10;
	 INST_top.INST_top.DEF_WILL_FIRE_RL_gcd_swap = INST_top.INST_top.DEF_CAN_FIRE_RL_gcd_swap;
	 INST_top.INST_top.DEF_inputFIFO_first____d19 = INST_top.INST_top.INST_inputFIFO.METH_first();
	 DEF_INST_top_INST_top_DEF_inputFIFO_i_notEmpty____d16 = INST_top.INST_top.INST_inputFIFO.METH_i_notEmpty();
	 DEF_INST_top_INST_top_DEF_inputFIFO_first__9_BIT_0___d20 = INST_top.INST_top.DEF_inputFIFO_first____d19.get_bits_in_word8(0u,
																   0u,
																   1u);
	 INST_top.INST_top.DEF_CAN_FIRE_RL_one = (DEF_INST_top_INST_top_DEF_inputFIFO_i_notEmpty____d16 && INST_top.INST_top.INST_adderRequestFIFO.METH_i_notFull()) && !DEF_INST_top_INST_top_DEF_inputFIFO_first__9_BIT_0___d20;
	 INST_top.INST_top.DEF_WILL_FIRE_RL_one = INST_top.INST_top.DEF_CAN_FIRE_RL_one;
	 INST_top.INST_top.DEF_CAN_FIRE_RL_oneb = (DEF_INST_top_INST_top_DEF_inputFIFO_i_notEmpty____d16 && INST_top.INST_top.INST_gcdRequestFIFO.METH_i_notFull()) && DEF_INST_top_INST_top_DEF_inputFIFO_first__9_BIT_0___d20;
	 INST_top.INST_top.DEF_WILL_FIRE_RL_oneb = INST_top.INST_top.DEF_CAN_FIRE_RL_oneb;
	 DEF_INST_top_INST_top_DEF_outputFIFO_i_notFull____d49 = INST_top.INST_top.INST_outputFIFO.METH_i_notFull();
	 INST_top.INST_top.DEF_CAN_FIRE_RL_six = DEF_INST_top_INST_top_DEF_outputFIFO_i_notFull____d49 && INST_top.INST_top.INST_adderResponseFIFO.METH_i_notEmpty();
	 INST_top.INST_top.DEF_WILL_FIRE_RL_six = INST_top.INST_top.DEF_CAN_FIRE_RL_six;
	 INST_top.INST_top.DEF_CAN_FIRE_RL_seven = DEF_INST_top_INST_top_DEF_outputFIFO_i_notFull____d49 && INST_top.INST_top.INST_gcdResponseFIFO.METH_i_notEmpty();
	 INST_top.INST_top.DEF_WILL_FIRE_RL_seven = INST_top.INST_top.DEF_CAN_FIRE_RL_seven && !(INST_top.INST_top.DEF_WILL_FIRE_RL_six);
	 INST_top.INST_top.DEF_CAN_FIRE_RL_three = (!DEF_INST_top_INST_top_DEF_gcd_input_valid__h756 && DEF_INST_top_INST_top_DEF_NOT_gcd_output_valid___d3) && INST_top.INST_top.INST_gcdRequestFIFO.METH_i_notEmpty();
	 INST_top.INST_top.DEF_WILL_FIRE_RL_three = INST_top.INST_top.DEF_CAN_FIRE_RL_three;
	 INST_top.INST_top.DEF_CAN_FIRE_RL_two = INST_top.INST_top.INST_intAdder.METH_RDY_request() && INST_top.INST_top.INST_adderRequestFIFO.METH_i_notEmpty();
	 INST_top.INST_top.DEF_WILL_FIRE_RL_two = INST_top.INST_top.DEF_CAN_FIRE_RL_two;
	 INST_top.INST_top.INST_intAdder.DEF_output_valid__h187 = INST_top.INST_top.INST_intAdder.INST_output_valid.METH_read();
	 INST_top.INST_top.INST_intAdder.DEF_NOT_output_valid___d2 = !(INST_top.INST_top.INST_intAdder.DEF_output_valid__h187);
	 INST_top.INST_top.INST_intAdder.DEF_input_valid__h190 = INST_top.INST_top.INST_intAdder.INST_input_valid.METH_read();
	 INST_top.INST_top.INST_intAdder.DEF_CAN_FIRE_RL_r_add = INST_top.INST_top.INST_intAdder.DEF_NOT_output_valid___d2 && INST_top.INST_top.INST_intAdder.DEF_input_valid__h190;
	 INST_top.INST_top.INST_intAdder.DEF_WILL_FIRE_RL_r_add = INST_top.INST_top.INST_intAdder.DEF_CAN_FIRE_RL_r_add;
	 if (INST_top.DEF_WILL_FIRE_RL_r_finish)
	   INST_top.RL_r_finish();
	 if (INST_top.DEF_WILL_FIRE_RL_r_disp_count)
	   INST_top.RL_r_disp_count();
	 if (INST_top.DEF_WILL_FIRE_RL_r_count_cycles)
	   INST_top.RL_r_count_cycles();
	 if (INST_top.DEF_WILL_FIRE_RL_r_recv_res)
	   INST_top.RL_r_recv_res();
	 if (INST_top.DEF_WILL_FIRE_RL_r_send_req)
	   INST_top.RL_r_send_req();
	 if (INST_top.INST_top.DEF_WILL_FIRE_RL_five)
	   INST_top.INST_top.RL_five();
	 if (INST_top.INST_top.DEF_WILL_FIRE_RL_gcd_stop)
	   INST_top.INST_top.RL_gcd_stop();
	 if (INST_top.INST_top.DEF_WILL_FIRE_RL_four)
	   INST_top.INST_top.RL_four();
	 if (INST_top.INST_top.DEF_WILL_FIRE_RL_gcd_subtract)
	   INST_top.INST_top.RL_gcd_subtract();
	 if (INST_top.INST_top.DEF_WILL_FIRE_RL_gcd_swap)
	   INST_top.INST_top.RL_gcd_swap();
	 if (INST_top.INST_top.DEF_WILL_FIRE_RL_one)
	   INST_top.INST_top.RL_one();
	 if (INST_top.INST_top.DEF_WILL_FIRE_RL_oneb)
	   INST_top.INST_top.RL_oneb();
	 if (INST_top.INST_top.DEF_WILL_FIRE_RL_seven)
	   INST_top.INST_top.RL_seven();
	 if (INST_top.INST_top.DEF_WILL_FIRE_RL_six)
	   INST_top.INST_top.RL_six();
	 if (INST_top.INST_top.DEF_WILL_FIRE_RL_three)
	   INST_top.INST_top.RL_three();
	 if (INST_top.INST_top.DEF_WILL_FIRE_RL_two)
	   INST_top.INST_top.RL_two();
	 if (INST_top.INST_top.INST_intAdder.DEF_WILL_FIRE_RL_r_add)
	   INST_top.INST_top.INST_intAdder.RL_r_add();
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_top.INST_intAdder.INST_input_valid.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_top.INST_intAdder.INST_output_valid.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_top.INST_inputFIFO.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_top.INST_outputFIFO.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_top.INST_adderRequestFIFO.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_top.INST_adderResponseFIFO.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_top.INST_gcdRequestFIFO.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_top.INST_gcdResponseFIFO.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_top.INST_gcd_x.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_top.INST_gcd_y.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_top.INST_gcd_input_valid.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_top.INST_gcd_output_valid.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_top.INST_countIntOpers.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_top.INST_countGCDOpers.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_0.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_1.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_2.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_3.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_4.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_5.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_6.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_7.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_8.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_9.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_10.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_11.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_12.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_13.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_14.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_15.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_16.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_17.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_18.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_19.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_20.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_21.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_22.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_23.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_24.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_25.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_26.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resultsInt_27.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_reqCount.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_intReqCount.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_intResCount.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_gcdReqCount.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_gcdResCount.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_resCount.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_done.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_cycles.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_int1.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_int2.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_gcd1.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_gcd2.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mkTb::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkTb_instance = new MOD_mkTb(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mkTb_instance->INST_top.INST_inputFIFO.set_clk_0)("CLK");
  (mkTb_instance->INST_top.INST_outputFIFO.set_clk_0)("CLK");
  (mkTb_instance->INST_top.INST_adderRequestFIFO.set_clk_0)("CLK");
  (mkTb_instance->INST_top.INST_adderResponseFIFO.set_clk_0)("CLK");
  (mkTb_instance->INST_top.INST_gcdRequestFIFO.set_clk_0)("CLK");
  (mkTb_instance->INST_top.INST_gcdResponseFIFO.set_clk_0)("CLK");
  (mkTb_instance->INST_top.INST_intAdder.set_clk_0)("CLK");
  (mkTb_instance->INST_top.set_clk_0)("CLK");
  (mkTb_instance->set_clk_0)("CLK");
}
void MODEL_mkTb::destroy_model()
{
  delete mkTb_instance;
  mkTb_instance = NULL;
}
void MODEL_mkTb::reset_model(bool asserted)
{
  (mkTb_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkTb::get_instance()
{
  return mkTb_instance;
}

/* Fill in version numbers */
void MODEL_mkTb::get_version(unsigned int *year,
			     unsigned int *month,
			     char const **annotation,
			     char const **build)
{
  *year = 2016u;
  *month = 7u;
  *annotation = "beta1";
  *build = "34806";
}

/* Get the model creation time */
time_t MODEL_mkTb::get_creation_time()
{
  
  /* Sat Mar 10 22:17:59 UTC 2018 */
  return 1520720279llu;
}

/* Control run-time licensing */
tUInt64 MODEL_mkTb::skip_license_check()
{
  return 0llu;
}

/* State dumping function */
void MODEL_mkTb::dump_state()
{
  (mkTb_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkTb & mkTb_backing(tSimStateHdl simHdl)
{
  static MOD_mkTb *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkTb(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkTb::dump_VCD_defs()
{
  (mkTb_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkTb::dump_VCD(tVCDDumpType dt)
{
  (mkTb_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mkTb_backing(sim_hdl));
}
