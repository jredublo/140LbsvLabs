/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Sat Mar 10 13:39:22 PST 2018
 * 
 */

/* Generation options: keep-fires */
#ifndef __mkAdder_h__
#define __mkAdder_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkAdder module */
class MOD_mkAdder : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt8> INST_input_valid;
  MOD_Reg<tUInt8> INST_output_valid;
  MOD_Reg<tUInt32> INST_result;
  MOD_Reg<tUInt32> INST_x;
  MOD_Reg<tUInt32> INST_y;
 
 /* Constructor */
 public:
  MOD_mkAdder(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt8 PORT_EN_request;
  tUInt8 PORT_EN_response;
  tUWide PORT_request_req;
  tUInt8 PORT_RDY_request;
  tUInt64 PORT_response;
  tUInt8 PORT_RDY_response;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_response;
  tUInt8 DEF_WILL_FIRE_request;
  tUInt8 DEF_CAN_FIRE_response;
  tUInt8 DEF_CAN_FIRE_request;
  tUInt8 DEF_WILL_FIRE_RL_r_add;
  tUInt8 DEF_CAN_FIRE_RL_r_add;
  tUInt8 DEF_output_valid__h187;
  tUInt8 DEF_NOT_output_valid___d2;
  tUInt8 DEF_input_valid__h190;
 
 /* Local definitions */
 private:
 
 /* Rules */
 public:
  void RL_r_add();
 
 /* Methods */
 public:
  void METH_request(tUWide ARG_request_req);
  tUInt8 METH_RDY_request();
  tUInt64 METH_response();
  tUInt8 METH_RDY_response();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkAdder &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkAdder &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkAdder &backing);
};

#endif /* ifndef __mkAdder_h__ */
