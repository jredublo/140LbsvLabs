/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Sat Mar 10 13:39:22 PST 2018
 * 
 */
#include "bluesim_primitives.h"
#include "mkAdder.h"


/* Constructor */
MOD_mkAdder::MOD_mkAdder(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_input_valid(simHdl, "input_valid", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_output_valid(simHdl, "output_valid", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_result(simHdl, "result", this, 32u),
    INST_x(simHdl, "x", this, 32u),
    INST_y(simHdl, "y", this, 32u),
    PORT_RST_N((tUInt8)1u)
{
  PORT_EN_request = false;
  PORT_EN_response = false;
  PORT_request_req.setSize(65u);
  PORT_request_req.clear();
  PORT_RDY_request = false;
  PORT_response = 0llu;
  PORT_RDY_response = false;
  symbol_count = 20u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkAdder::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_RL_r_add", SYM_DEF, &DEF_CAN_FIRE_RL_r_add, 1u);
  init_symbol(&symbols[1u], "CAN_FIRE_request", SYM_DEF, &DEF_CAN_FIRE_request, 1u);
  init_symbol(&symbols[2u], "CAN_FIRE_response", SYM_DEF, &DEF_CAN_FIRE_response, 1u);
  init_symbol(&symbols[3u], "EN_request", SYM_PORT, &PORT_EN_request, 1u);
  init_symbol(&symbols[4u], "EN_response", SYM_PORT, &PORT_EN_response, 1u);
  init_symbol(&symbols[5u], "input_valid", SYM_MODULE, &INST_input_valid);
  init_symbol(&symbols[6u], "input_valid__h190", SYM_DEF, &DEF_input_valid__h190, 1u);
  init_symbol(&symbols[7u], "output_valid", SYM_MODULE, &INST_output_valid);
  init_symbol(&symbols[8u], "output_valid__h187", SYM_DEF, &DEF_output_valid__h187, 1u);
  init_symbol(&symbols[9u], "RDY_request", SYM_PORT, &PORT_RDY_request, 1u);
  init_symbol(&symbols[10u], "RDY_response", SYM_PORT, &PORT_RDY_response, 1u);
  init_symbol(&symbols[11u], "RL_r_add", SYM_RULE);
  init_symbol(&symbols[12u], "request_req", SYM_PORT, &PORT_request_req, 65u);
  init_symbol(&symbols[13u], "response", SYM_PORT, &PORT_response, 33u);
  init_symbol(&symbols[14u], "result", SYM_MODULE, &INST_result);
  init_symbol(&symbols[15u], "WILL_FIRE_RL_r_add", SYM_DEF, &DEF_WILL_FIRE_RL_r_add, 1u);
  init_symbol(&symbols[16u], "WILL_FIRE_request", SYM_DEF, &DEF_WILL_FIRE_request, 1u);
  init_symbol(&symbols[17u], "WILL_FIRE_response", SYM_DEF, &DEF_WILL_FIRE_response, 1u);
  init_symbol(&symbols[18u], "x", SYM_MODULE, &INST_x);
  init_symbol(&symbols[19u], "y", SYM_MODULE, &INST_y);
}


/* Rule actions */

void MOD_mkAdder::RL_r_add()
{
  tUInt32 DEF_x__h205;
  tUInt32 DEF__read__h44;
  tUInt32 DEF__read__h75;
  DEF__read__h75 = INST_y.METH_read();
  DEF__read__h44 = INST_x.METH_read();
  DEF_x__h205 = DEF__read__h44 + DEF__read__h75;
  INST_result.METH_write(DEF_x__h205);
  INST_output_valid.METH_write((tUInt8)1u);
}


/* Methods */

void MOD_mkAdder::METH_request(tUWide ARG_request_req)
{
  tUInt32 DEF_x__h310;
  tUInt32 DEF_x__h289;
  PORT_EN_request = (tUInt8)1u;
  DEF_WILL_FIRE_request = (tUInt8)1u;
  PORT_request_req = ARG_request_req;
  DEF_x__h289 = primExtract32(32u, 65u, ARG_request_req, 32u, 64u, 32u, 33u);
  DEF_x__h310 = primExtract32(32u, 65u, ARG_request_req, 32u, 32u, 32u, 1u);
  INST_input_valid.METH_write((tUInt8)1u);
  INST_x.METH_write(DEF_x__h289);
  INST_y.METH_write(DEF_x__h310);
}

tUInt8 MOD_mkAdder::METH_RDY_request()
{
  DEF_output_valid__h187 = INST_output_valid.METH_read();
  DEF_NOT_output_valid___d2 = !DEF_output_valid__h187;
  DEF_input_valid__h190 = INST_input_valid.METH_read();
  DEF_CAN_FIRE_request = !DEF_input_valid__h190 && DEF_NOT_output_valid___d2;
  PORT_RDY_request = DEF_CAN_FIRE_request;
  return PORT_RDY_request;
}

tUInt64 MOD_mkAdder::METH_response()
{
  tUInt32 DEF_x__h327;
  PORT_EN_response = (tUInt8)1u;
  DEF_WILL_FIRE_response = (tUInt8)1u;
  DEF_x__h327 = INST_result.METH_read();
  PORT_response = 8589934591llu & ((((tUInt64)(DEF_x__h327)) << 1u) | (tUInt64)((tUInt8)0u));
  INST_output_valid.METH_write((tUInt8)0u);
  INST_input_valid.METH_write((tUInt8)0u);
  return PORT_response;
}

tUInt8 MOD_mkAdder::METH_RDY_response()
{
  DEF_output_valid__h187 = INST_output_valid.METH_read();
  DEF_CAN_FIRE_response = DEF_output_valid__h187;
  PORT_RDY_response = DEF_CAN_FIRE_response;
  return PORT_RDY_response;
}


/* Reset routines */

void MOD_mkAdder::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_output_valid.reset_RST(ARG_rst_in);
  INST_input_valid.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkAdder::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkAdder::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_input_valid.dump_state(indent + 2u);
  INST_output_valid.dump_state(indent + 2u);
  INST_result.dump_state(indent + 2u);
  INST_x.dump_state(indent + 2u);
  INST_y.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkAdder::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 21u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_r_add", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_response", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_output_valid___d2", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_r_add", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_response", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "input_valid__h190", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "output_valid__h187", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_response", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_response", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "request_req", 65u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "response", 33u);
  num = INST_input_valid.dump_VCD_defs(num);
  num = INST_output_valid.dump_VCD_defs(num);
  num = INST_result.dump_VCD_defs(num);
  num = INST_x.dump_VCD_defs(num);
  num = INST_y.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkAdder::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkAdder &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkAdder::vcd_defs(tVCDDumpType dt, MOD_mkAdder &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 65u);
    vcd_write_x(sim_hdl, num++, 33u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_r_add) != DEF_CAN_FIRE_RL_r_add)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_r_add, 1u);
	backing.DEF_CAN_FIRE_RL_r_add = DEF_CAN_FIRE_RL_r_add;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_request) != DEF_CAN_FIRE_request)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_request, 1u);
	backing.DEF_CAN_FIRE_request = DEF_CAN_FIRE_request;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_response) != DEF_CAN_FIRE_response)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_response, 1u);
	backing.DEF_CAN_FIRE_response = DEF_CAN_FIRE_response;
      }
      ++num;
      if ((backing.DEF_NOT_output_valid___d2) != DEF_NOT_output_valid___d2)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_output_valid___d2, 1u);
	backing.DEF_NOT_output_valid___d2 = DEF_NOT_output_valid___d2;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_r_add) != DEF_WILL_FIRE_RL_r_add)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_r_add, 1u);
	backing.DEF_WILL_FIRE_RL_r_add = DEF_WILL_FIRE_RL_r_add;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_request) != DEF_WILL_FIRE_request)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_request, 1u);
	backing.DEF_WILL_FIRE_request = DEF_WILL_FIRE_request;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_response) != DEF_WILL_FIRE_response)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_response, 1u);
	backing.DEF_WILL_FIRE_response = DEF_WILL_FIRE_response;
      }
      ++num;
      if ((backing.DEF_input_valid__h190) != DEF_input_valid__h190)
      {
	vcd_write_val(sim_hdl, num, DEF_input_valid__h190, 1u);
	backing.DEF_input_valid__h190 = DEF_input_valid__h190;
      }
      ++num;
      if ((backing.DEF_output_valid__h187) != DEF_output_valid__h187)
      {
	vcd_write_val(sim_hdl, num, DEF_output_valid__h187, 1u);
	backing.DEF_output_valid__h187 = DEF_output_valid__h187;
      }
      ++num;
      if ((backing.PORT_EN_request) != PORT_EN_request)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_request, 1u);
	backing.PORT_EN_request = PORT_EN_request;
      }
      ++num;
      if ((backing.PORT_EN_response) != PORT_EN_response)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_response, 1u);
	backing.PORT_EN_response = PORT_EN_response;
      }
      ++num;
      if ((backing.PORT_RDY_request) != PORT_RDY_request)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_request, 1u);
	backing.PORT_RDY_request = PORT_RDY_request;
      }
      ++num;
      if ((backing.PORT_RDY_response) != PORT_RDY_response)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_response, 1u);
	backing.PORT_RDY_response = PORT_RDY_response;
      }
      ++num;
      if ((backing.PORT_request_req) != PORT_request_req)
      {
	vcd_write_val(sim_hdl, num, PORT_request_req, 65u);
	backing.PORT_request_req = PORT_request_req;
      }
      ++num;
      if ((backing.PORT_response) != PORT_response)
      {
	vcd_write_val(sim_hdl, num, PORT_response, 33u);
	backing.PORT_response = PORT_response;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_r_add, 1u);
      backing.DEF_CAN_FIRE_RL_r_add = DEF_CAN_FIRE_RL_r_add;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_request, 1u);
      backing.DEF_CAN_FIRE_request = DEF_CAN_FIRE_request;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_response, 1u);
      backing.DEF_CAN_FIRE_response = DEF_CAN_FIRE_response;
      vcd_write_val(sim_hdl, num++, DEF_NOT_output_valid___d2, 1u);
      backing.DEF_NOT_output_valid___d2 = DEF_NOT_output_valid___d2;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_r_add, 1u);
      backing.DEF_WILL_FIRE_RL_r_add = DEF_WILL_FIRE_RL_r_add;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_request, 1u);
      backing.DEF_WILL_FIRE_request = DEF_WILL_FIRE_request;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_response, 1u);
      backing.DEF_WILL_FIRE_response = DEF_WILL_FIRE_response;
      vcd_write_val(sim_hdl, num++, DEF_input_valid__h190, 1u);
      backing.DEF_input_valid__h190 = DEF_input_valid__h190;
      vcd_write_val(sim_hdl, num++, DEF_output_valid__h187, 1u);
      backing.DEF_output_valid__h187 = DEF_output_valid__h187;
      vcd_write_val(sim_hdl, num++, PORT_EN_request, 1u);
      backing.PORT_EN_request = PORT_EN_request;
      vcd_write_val(sim_hdl, num++, PORT_EN_response, 1u);
      backing.PORT_EN_response = PORT_EN_response;
      vcd_write_val(sim_hdl, num++, PORT_RDY_request, 1u);
      backing.PORT_RDY_request = PORT_RDY_request;
      vcd_write_val(sim_hdl, num++, PORT_RDY_response, 1u);
      backing.PORT_RDY_response = PORT_RDY_response;
      vcd_write_val(sim_hdl, num++, PORT_request_req, 65u);
      backing.PORT_request_req = PORT_request_req;
      vcd_write_val(sim_hdl, num++, PORT_response, 33u);
      backing.PORT_response = PORT_response;
    }
}

void MOD_mkAdder::vcd_prims(tVCDDumpType dt, MOD_mkAdder &backing)
{
  INST_input_valid.dump_VCD(dt, backing.INST_input_valid);
  INST_output_valid.dump_VCD(dt, backing.INST_output_valid);
  INST_result.dump_VCD(dt, backing.INST_result);
  INST_x.dump_VCD(dt, backing.INST_x);
  INST_y.dump_VCD(dt, backing.INST_y);
}
