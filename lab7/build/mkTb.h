/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Sat Mar 10 14:17:59 PST 2018
 * 
 */

/* Generation options: keep-fires */
#ifndef __mkTb_h__
#define __mkTb_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkTop.h"


/* Class declaration for the mkTb module */
class MOD_mkTb : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt64> INST_cycles;
  MOD_Reg<tUInt8> INST_done;
  MOD_Reg<tUInt32> INST_gcd1;
  MOD_Reg<tUInt32> INST_gcd2;
  MOD_Reg<tUInt32> INST_gcdReqCount;
  MOD_Reg<tUInt32> INST_gcdResCount;
  MOD_Reg<tUInt32> INST_int1;
  MOD_Reg<tUInt32> INST_int2;
  MOD_Reg<tUInt32> INST_intReqCount;
  MOD_Reg<tUInt32> INST_intResCount;
  MOD_Reg<tUInt32> INST_reqCount;
  MOD_Reg<tUInt32> INST_resCount;
  MOD_Reg<tUInt32> INST_resultsInt_0;
  MOD_Reg<tUInt32> INST_resultsInt_1;
  MOD_Reg<tUInt32> INST_resultsInt_10;
  MOD_Reg<tUInt32> INST_resultsInt_11;
  MOD_Reg<tUInt32> INST_resultsInt_12;
  MOD_Reg<tUInt32> INST_resultsInt_13;
  MOD_Reg<tUInt32> INST_resultsInt_14;
  MOD_Reg<tUInt32> INST_resultsInt_15;
  MOD_Reg<tUInt32> INST_resultsInt_16;
  MOD_Reg<tUInt32> INST_resultsInt_17;
  MOD_Reg<tUInt32> INST_resultsInt_18;
  MOD_Reg<tUInt32> INST_resultsInt_19;
  MOD_Reg<tUInt32> INST_resultsInt_2;
  MOD_Reg<tUInt32> INST_resultsInt_20;
  MOD_Reg<tUInt32> INST_resultsInt_21;
  MOD_Reg<tUInt32> INST_resultsInt_22;
  MOD_Reg<tUInt32> INST_resultsInt_23;
  MOD_Reg<tUInt32> INST_resultsInt_24;
  MOD_Reg<tUInt32> INST_resultsInt_25;
  MOD_Reg<tUInt32> INST_resultsInt_26;
  MOD_Reg<tUInt32> INST_resultsInt_27;
  MOD_Reg<tUInt32> INST_resultsInt_3;
  MOD_Reg<tUInt32> INST_resultsInt_4;
  MOD_Reg<tUInt32> INST_resultsInt_5;
  MOD_Reg<tUInt32> INST_resultsInt_6;
  MOD_Reg<tUInt32> INST_resultsInt_7;
  MOD_Reg<tUInt32> INST_resultsInt_8;
  MOD_Reg<tUInt32> INST_resultsInt_9;
  MOD_mkTop INST_top;
 
 /* Constructor */
 public:
  MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_r_finish;
  tUInt8 DEF_CAN_FIRE_RL_r_finish;
  tUInt8 DEF_WILL_FIRE_RL_r_disp_count;
  tUInt8 DEF_CAN_FIRE_RL_r_disp_count;
  tUInt8 DEF_WILL_FIRE_RL_r_recv_res;
  tUInt8 DEF_CAN_FIRE_RL_r_recv_res;
  tUInt8 DEF_WILL_FIRE_RL_r_send_req;
  tUInt8 DEF_CAN_FIRE_RL_r_send_req;
  tUInt8 DEF_WILL_FIRE_RL_r_count_cycles;
  tUInt8 DEF_CAN_FIRE_RL_r_count_cycles;
  tUInt32 DEF_x__h5070;
  tUInt32 DEF_x__h4455;
 
 /* Local definitions */
 private:
  tUInt64 DEF__read__h2085;
  tUWide DEF_IF_SEL_ARR_1_1_0_0_0_0_1_1_1_1_1_1_1_1_1_0_1_1_ETC___d86;
 
 /* Rules */
 public:
  void RL_r_count_cycles();
  void RL_r_send_req();
  void RL_r_recv_res();
  void RL_r_disp_count();
  void RL_r_finish();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkTb &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkTb &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing);
};

#endif /* ifndef __mkTb_h__ */
