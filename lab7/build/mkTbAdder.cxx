/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Sat Mar 10 11:14:12 PST 2018
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbAdder.h"


/* Literal declarations */
static unsigned int const UWide_literal_65_h1600000008_arr[] = { 8u, 22u, 0u };
static tUWide const UWide_literal_65_h1600000008(65u, UWide_literal_65_h1600000008_arr);
static unsigned int const UWide_literal_65_h2e00000018_arr[] = { 24u, 46u, 0u };
static tUWide const UWide_literal_65_h2e00000018(65u, UWide_literal_65_h2e00000018_arr);


/* String declarations */
static std::string const __str_literal_2("<<<< Response[%d] result: %d, oper:Add", 38u);
static std::string const __str_literal_1(">>>> Request[%d] op1: %d, op2: %d; oper: Add", 44u);
static std::string const __str_literal_4("FAILED! oper:Add Expected:%d Got:%d", 35u);
static std::string const __str_literal_3("PASSED", 6u);


/* Constructor */
MOD_mkTbAdder::MOD_mkTbAdder(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_adder(simHdl, "adder", this),
    INST_state(simHdl, "state", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_state2(simHdl, "state2", this, 2u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 15u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbAdder::init_symbols_0()
{
  init_symbol(&symbols[0u], "adder", SYM_MODULE, &INST_adder);
  init_symbol(&symbols[1u], "CAN_FIRE_RL_r_recv_adder", SYM_DEF, &DEF_CAN_FIRE_RL_r_recv_adder, 1u);
  init_symbol(&symbols[2u], "CAN_FIRE_RL_r_recv_adder2", SYM_DEF, &DEF_CAN_FIRE_RL_r_recv_adder2, 1u);
  init_symbol(&symbols[3u], "CAN_FIRE_RL_r_send_adder", SYM_DEF, &DEF_CAN_FIRE_RL_r_send_adder, 1u);
  init_symbol(&symbols[4u], "CAN_FIRE_RL_r_send_adder2", SYM_DEF, &DEF_CAN_FIRE_RL_r_send_adder2, 1u);
  init_symbol(&symbols[5u], "RL_r_recv_adder", SYM_RULE);
  init_symbol(&symbols[6u], "RL_r_recv_adder2", SYM_RULE);
  init_symbol(&symbols[7u], "RL_r_send_adder", SYM_RULE);
  init_symbol(&symbols[8u], "RL_r_send_adder2", SYM_RULE);
  init_symbol(&symbols[9u], "state", SYM_MODULE, &INST_state);
  init_symbol(&symbols[10u], "state2", SYM_MODULE, &INST_state2);
  init_symbol(&symbols[11u],
	      "WILL_FIRE_RL_r_recv_adder",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_r_recv_adder,
	      1u);
  init_symbol(&symbols[12u],
	      "WILL_FIRE_RL_r_recv_adder2",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_r_recv_adder2,
	      1u);
  init_symbol(&symbols[13u],
	      "WILL_FIRE_RL_r_send_adder",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_r_send_adder,
	      1u);
  init_symbol(&symbols[14u],
	      "WILL_FIRE_RL_r_send_adder2",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_r_send_adder2,
	      1u);
}


/* Rule actions */

void MOD_mkTbAdder::RL_r_send_adder()
{
  DEF_signed_0___d5 = 0u;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32,32,32", &__str_literal_1, DEF_signed_0___d5, 23u, 12u);
  INST_adder.METH_request(UWide_literal_65_h2e00000018);
  INST_state.METH_write((tUInt8)1u);
}

void MOD_mkTbAdder::RL_r_send_adder2()
{
  DEF_signed_0___d5 = 0u;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32,32,32", &__str_literal_1, DEF_signed_0___d5, 11u, 4u);
  INST_adder.METH_request(UWide_literal_65_h1600000008);
  INST_state.METH_write((tUInt8)2u);
}

void MOD_mkTbAdder::RL_r_recv_adder()
{
  tUInt8 DEF_NOT_adder_response_2_BITS_32_TO_1_3_EQ_35_4___d15;
  tUInt8 DEF_adder_response_2_BITS_32_TO_1_3_EQ_35___d14;
  tUInt32 DEF_signed_35___d16;
  tUInt64 DEF_AVMeth_adder_response;
  DEF_signed_35___d16 = 35u;
  DEF_signed_0___d5 = 0u;
  DEF_AVMeth_adder_response = INST_adder.METH_response();
  DEF_x__h503 = (tUInt32)(DEF_AVMeth_adder_response >> 1u);
  DEF_adder_response_2_BITS_32_TO_1_3_EQ_35___d14 = DEF_x__h503 == 35u;
  DEF_NOT_adder_response_2_BITS_32_TO_1_3_EQ_35_4___d15 = !DEF_adder_response_2_BITS_32_TO_1_3_EQ_35___d14;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_adder_response_2_BITS_32_TO_1_3_EQ_35___d14)
      dollar_display(sim_hdl, this, "s,-32,32", &__str_literal_2, DEF_signed_0___d5, DEF_x__h503);
    if (DEF_adder_response_2_BITS_32_TO_1_3_EQ_35___d14)
      dollar_display(sim_hdl, this, "s", &__str_literal_3);
    if (DEF_NOT_adder_response_2_BITS_32_TO_1_3_EQ_35_4___d15)
      dollar_display(sim_hdl, this, "s,-32,32", &__str_literal_4, DEF_signed_35___d16, DEF_x__h503);
  }
  INST_state2.METH_write((tUInt8)1u);
}

void MOD_mkTbAdder::RL_r_recv_adder2()
{
  tUInt8 DEF_NOT_adder_response_2_BITS_32_TO_1_3_EQ_15_9___d20;
  tUInt8 DEF_adder_response_2_BITS_32_TO_1_3_EQ_15___d19;
  tUInt32 DEF_signed_15___d21;
  tUInt64 DEF_AVMeth_adder_response;
  DEF_signed_15___d21 = 15u;
  DEF_signed_0___d5 = 0u;
  DEF_AVMeth_adder_response = INST_adder.METH_response();
  DEF_x__h503 = (tUInt32)(DEF_AVMeth_adder_response >> 1u);
  DEF_adder_response_2_BITS_32_TO_1_3_EQ_15___d19 = DEF_x__h503 == 15u;
  DEF_NOT_adder_response_2_BITS_32_TO_1_3_EQ_15_9___d20 = !DEF_adder_response_2_BITS_32_TO_1_3_EQ_15___d19;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_adder_response_2_BITS_32_TO_1_3_EQ_15___d19)
      dollar_display(sim_hdl, this, "s,-32,32", &__str_literal_2, DEF_signed_0___d5, DEF_x__h503);
    if (DEF_adder_response_2_BITS_32_TO_1_3_EQ_15___d19)
      dollar_display(sim_hdl, this, "s", &__str_literal_3);
    if (DEF_adder_response_2_BITS_32_TO_1_3_EQ_15___d19)
      dollar_finish(sim_hdl, "32", 0u);
    if (DEF_NOT_adder_response_2_BITS_32_TO_1_3_EQ_15_9___d20)
      dollar_display(sim_hdl, this, "s,-32,32", &__str_literal_4, DEF_signed_15___d21, DEF_x__h503);
    if (DEF_NOT_adder_response_2_BITS_32_TO_1_3_EQ_15_9___d20)
      dollar_finish(sim_hdl, "32", 0u);
  }
}


/* Methods */


/* Reset routines */

void MOD_mkTbAdder::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_state2.reset_RST(ARG_rst_in);
  INST_state.reset_RST(ARG_rst_in);
  INST_adder.reset_RST_N(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbAdder::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbAdder::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_adder.dump_state(indent + 2u);
  INST_state.dump_state(indent + 2u);
  INST_state2.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbAdder::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 13u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_r_recv_adder", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_r_recv_adder2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_r_send_adder", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_r_send_adder2", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_r_recv_adder", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_r_recv_adder2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_r_send_adder", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_r_send_adder2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "signed_0___d5", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h503", 32u);
  num = INST_state.dump_VCD_defs(num);
  num = INST_state2.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_adder.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbAdder::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbAdder &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkTbAdder::vcd_defs(tVCDDumpType dt, MOD_mkTbAdder &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_r_recv_adder) != DEF_CAN_FIRE_RL_r_recv_adder)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_r_recv_adder, 1u);
	backing.DEF_CAN_FIRE_RL_r_recv_adder = DEF_CAN_FIRE_RL_r_recv_adder;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_r_recv_adder2) != DEF_CAN_FIRE_RL_r_recv_adder2)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_r_recv_adder2, 1u);
	backing.DEF_CAN_FIRE_RL_r_recv_adder2 = DEF_CAN_FIRE_RL_r_recv_adder2;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_r_send_adder) != DEF_CAN_FIRE_RL_r_send_adder)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_r_send_adder, 1u);
	backing.DEF_CAN_FIRE_RL_r_send_adder = DEF_CAN_FIRE_RL_r_send_adder;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_r_send_adder2) != DEF_CAN_FIRE_RL_r_send_adder2)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_r_send_adder2, 1u);
	backing.DEF_CAN_FIRE_RL_r_send_adder2 = DEF_CAN_FIRE_RL_r_send_adder2;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_r_recv_adder) != DEF_WILL_FIRE_RL_r_recv_adder)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_r_recv_adder, 1u);
	backing.DEF_WILL_FIRE_RL_r_recv_adder = DEF_WILL_FIRE_RL_r_recv_adder;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_r_recv_adder2) != DEF_WILL_FIRE_RL_r_recv_adder2)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_r_recv_adder2, 1u);
	backing.DEF_WILL_FIRE_RL_r_recv_adder2 = DEF_WILL_FIRE_RL_r_recv_adder2;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_r_send_adder) != DEF_WILL_FIRE_RL_r_send_adder)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_r_send_adder, 1u);
	backing.DEF_WILL_FIRE_RL_r_send_adder = DEF_WILL_FIRE_RL_r_send_adder;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_r_send_adder2) != DEF_WILL_FIRE_RL_r_send_adder2)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_r_send_adder2, 1u);
	backing.DEF_WILL_FIRE_RL_r_send_adder2 = DEF_WILL_FIRE_RL_r_send_adder2;
      }
      ++num;
      if ((backing.DEF_signed_0___d5) != DEF_signed_0___d5)
      {
	vcd_write_val(sim_hdl, num, DEF_signed_0___d5, 32u);
	backing.DEF_signed_0___d5 = DEF_signed_0___d5;
      }
      ++num;
      if ((backing.DEF_x__h503) != DEF_x__h503)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h503, 32u);
	backing.DEF_x__h503 = DEF_x__h503;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_r_recv_adder, 1u);
      backing.DEF_CAN_FIRE_RL_r_recv_adder = DEF_CAN_FIRE_RL_r_recv_adder;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_r_recv_adder2, 1u);
      backing.DEF_CAN_FIRE_RL_r_recv_adder2 = DEF_CAN_FIRE_RL_r_recv_adder2;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_r_send_adder, 1u);
      backing.DEF_CAN_FIRE_RL_r_send_adder = DEF_CAN_FIRE_RL_r_send_adder;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_r_send_adder2, 1u);
      backing.DEF_CAN_FIRE_RL_r_send_adder2 = DEF_CAN_FIRE_RL_r_send_adder2;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_r_recv_adder, 1u);
      backing.DEF_WILL_FIRE_RL_r_recv_adder = DEF_WILL_FIRE_RL_r_recv_adder;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_r_recv_adder2, 1u);
      backing.DEF_WILL_FIRE_RL_r_recv_adder2 = DEF_WILL_FIRE_RL_r_recv_adder2;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_r_send_adder, 1u);
      backing.DEF_WILL_FIRE_RL_r_send_adder = DEF_WILL_FIRE_RL_r_send_adder;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_r_send_adder2, 1u);
      backing.DEF_WILL_FIRE_RL_r_send_adder2 = DEF_WILL_FIRE_RL_r_send_adder2;
      vcd_write_val(sim_hdl, num++, DEF_signed_0___d5, 32u);
      backing.DEF_signed_0___d5 = DEF_signed_0___d5;
      vcd_write_val(sim_hdl, num++, DEF_x__h503, 32u);
      backing.DEF_x__h503 = DEF_x__h503;
    }
}

void MOD_mkTbAdder::vcd_prims(tVCDDumpType dt, MOD_mkTbAdder &backing)
{
  INST_state.dump_VCD(dt, backing.INST_state);
  INST_state2.dump_VCD(dt, backing.INST_state2);
}

void MOD_mkTbAdder::vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkTbAdder &backing)
{
  INST_adder.dump_VCD(dt, levels, backing.INST_adder);
}
