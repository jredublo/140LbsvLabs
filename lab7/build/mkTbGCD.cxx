/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Sat Mar 10 11:16:13 PST 2018
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbGCD.h"


/* String declarations */
static std::string const __str_literal_2("<<<< Response[%d] result: %d, oper:GCD", 38u);
static std::string const __str_literal_1(">>>> Request[%d] op1: %d, op2: %d; oper: GCD", 44u);
static std::string const __str_literal_4("FAILED! oper:GCD Expected:%d Got:%d", 35u);
static std::string const __str_literal_3("PASSED", 6u);


/* Constructor */
MOD_mkTbGCD::MOD_mkTbGCD(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_gcd_input_valid(simHdl, "gcd_input_valid", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_gcd_output_valid(simHdl, "gcd_output_valid", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_gcd_x(simHdl, "gcd_x", this, 32u, 0u, (tUInt8)0u),
    INST_gcd_y(simHdl, "gcd_y", this, 32u, 0u, (tUInt8)0u),
    INST_state(simHdl, "state", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_state2(simHdl, "state2", this, 2u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 29u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbGCD::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_RL_gcd_stop", SYM_DEF, &DEF_CAN_FIRE_RL_gcd_stop, 1u);
  init_symbol(&symbols[1u], "CAN_FIRE_RL_gcd_subtract", SYM_DEF, &DEF_CAN_FIRE_RL_gcd_subtract, 1u);
  init_symbol(&symbols[2u], "CAN_FIRE_RL_gcd_swap", SYM_DEF, &DEF_CAN_FIRE_RL_gcd_swap, 1u);
  init_symbol(&symbols[3u], "CAN_FIRE_RL_r_recv_gcd", SYM_DEF, &DEF_CAN_FIRE_RL_r_recv_gcd, 1u);
  init_symbol(&symbols[4u], "CAN_FIRE_RL_r_recv_gcd2", SYM_DEF, &DEF_CAN_FIRE_RL_r_recv_gcd2, 1u);
  init_symbol(&symbols[5u], "CAN_FIRE_RL_r_send_gcd", SYM_DEF, &DEF_CAN_FIRE_RL_r_send_gcd, 1u);
  init_symbol(&symbols[6u], "CAN_FIRE_RL_r_send_gcd2", SYM_DEF, &DEF_CAN_FIRE_RL_r_send_gcd2, 1u);
  init_symbol(&symbols[7u], "finalR_res__h684", SYM_DEF, &DEF_finalR_res__h684, 32u);
  init_symbol(&symbols[8u], "finalR_res__h688", SYM_DEF, &DEF_finalR_res__h688, 32u);
  init_symbol(&symbols[9u], "gcd_input_valid", SYM_MODULE, &INST_gcd_input_valid);
  init_symbol(&symbols[10u], "gcd_output_valid", SYM_MODULE, &INST_gcd_output_valid);
  init_symbol(&symbols[11u], "gcd_x", SYM_MODULE, &INST_gcd_x);
  init_symbol(&symbols[12u], "gcd_y", SYM_MODULE, &INST_gcd_y);
  init_symbol(&symbols[13u], "RL_gcd_stop", SYM_RULE);
  init_symbol(&symbols[14u], "RL_gcd_subtract", SYM_RULE);
  init_symbol(&symbols[15u], "RL_gcd_swap", SYM_RULE);
  init_symbol(&symbols[16u], "RL_r_recv_gcd", SYM_RULE);
  init_symbol(&symbols[17u], "RL_r_recv_gcd2", SYM_RULE);
  init_symbol(&symbols[18u], "RL_r_send_gcd", SYM_RULE);
  init_symbol(&symbols[19u], "RL_r_send_gcd2", SYM_RULE);
  init_symbol(&symbols[20u], "state", SYM_MODULE, &INST_state);
  init_symbol(&symbols[21u], "state2", SYM_MODULE, &INST_state2);
  init_symbol(&symbols[22u], "WILL_FIRE_RL_gcd_stop", SYM_DEF, &DEF_WILL_FIRE_RL_gcd_stop, 1u);
  init_symbol(&symbols[23u],
	      "WILL_FIRE_RL_gcd_subtract",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_gcd_subtract,
	      1u);
  init_symbol(&symbols[24u], "WILL_FIRE_RL_gcd_swap", SYM_DEF, &DEF_WILL_FIRE_RL_gcd_swap, 1u);
  init_symbol(&symbols[25u], "WILL_FIRE_RL_r_recv_gcd", SYM_DEF, &DEF_WILL_FIRE_RL_r_recv_gcd, 1u);
  init_symbol(&symbols[26u], "WILL_FIRE_RL_r_recv_gcd2", SYM_DEF, &DEF_WILL_FIRE_RL_r_recv_gcd2, 1u);
  init_symbol(&symbols[27u], "WILL_FIRE_RL_r_send_gcd", SYM_DEF, &DEF_WILL_FIRE_RL_r_send_gcd, 1u);
  init_symbol(&symbols[28u], "WILL_FIRE_RL_r_send_gcd2", SYM_DEF, &DEF_WILL_FIRE_RL_r_send_gcd2, 1u);
}


/* Rule actions */

void MOD_mkTbGCD::RL_gcd_swap()
{
  DEF_finalR_res__h684 = INST_gcd_y.METH_read();
  DEF_finalR_res__h688 = INST_gcd_x.METH_read();
  INST_gcd_y.METH_write(DEF_finalR_res__h688);
  INST_gcd_x.METH_write(DEF_finalR_res__h684);
}

void MOD_mkTbGCD::RL_gcd_subtract()
{
  tUInt32 DEF_x__h260;
  DEF_finalR_res__h684 = INST_gcd_y.METH_read();
  DEF_finalR_res__h688 = INST_gcd_x.METH_read();
  DEF_x__h260 = DEF_finalR_res__h688 - DEF_finalR_res__h684;
  INST_gcd_x.METH_write(DEF_x__h260);
}

void MOD_mkTbGCD::RL_gcd_stop()
{
  INST_gcd_output_valid.METH_write((tUInt8)1u);
}

void MOD_mkTbGCD::RL_r_send_gcd()
{
  DEF_signed_0___d21 = 0u;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32,32,32", &__str_literal_1, DEF_signed_0___d21, 8u, 2u);
  INST_gcd_input_valid.METH_write((tUInt8)1u);
  INST_gcd_x.METH_write(8u);
  INST_state.METH_write((tUInt8)1u);
  INST_gcd_y.METH_write(2u);
}

void MOD_mkTbGCD::RL_r_send_gcd2()
{
  DEF_signed_0___d21 = 0u;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32,32,32", &__str_literal_1, DEF_signed_0___d21, 8u, 9u);
  INST_gcd_input_valid.METH_write((tUInt8)1u);
  INST_gcd_x.METH_write(8u);
  INST_state.METH_write((tUInt8)2u);
  INST_gcd_y.METH_write(9u);
}

void MOD_mkTbGCD::RL_r_recv_gcd()
{
  tUInt8 DEF_NOT_IF_gcd_x_EQ_0_THEN_gcd_y_ELSE_gcd_x_7_EQ_2_8___d29;
  tUInt8 DEF_IF_gcd_x_EQ_0_THEN_gcd_y_ELSE_gcd_x_7_EQ_2___d28;
  tUInt32 DEF_signed_2___d30;
  DEF_signed_2___d30 = 2u;
  DEF_signed_0___d21 = 0u;
  DEF_finalR_res__h684 = INST_gcd_y.METH_read();
  DEF_finalR_res__h688 = INST_gcd_x.METH_read();
  DEF_gcd_x_EQ_0___d6 = DEF_finalR_res__h688 == 0u;
  DEF_x__h705 = DEF_gcd_x_EQ_0___d6 ? DEF_finalR_res__h684 : DEF_finalR_res__h688;
  DEF_IF_gcd_x_EQ_0_THEN_gcd_y_ELSE_gcd_x_7_EQ_2___d28 = DEF_x__h705 == 2u;
  DEF_NOT_IF_gcd_x_EQ_0_THEN_gcd_y_ELSE_gcd_x_7_EQ_2_8___d29 = !DEF_IF_gcd_x_EQ_0_THEN_gcd_y_ELSE_gcd_x_7_EQ_2___d28;
  INST_gcd_output_valid.METH_write((tUInt8)0u);
  INST_gcd_input_valid.METH_write((tUInt8)0u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_IF_gcd_x_EQ_0_THEN_gcd_y_ELSE_gcd_x_7_EQ_2___d28)
      dollar_display(sim_hdl, this, "s,-32,32", &__str_literal_2, DEF_signed_0___d21, DEF_x__h705);
    if (DEF_IF_gcd_x_EQ_0_THEN_gcd_y_ELSE_gcd_x_7_EQ_2___d28)
      dollar_display(sim_hdl, this, "s", &__str_literal_3);
    if (DEF_NOT_IF_gcd_x_EQ_0_THEN_gcd_y_ELSE_gcd_x_7_EQ_2_8___d29)
      dollar_display(sim_hdl, this, "s,-32,32", &__str_literal_4, DEF_signed_2___d30, DEF_x__h705);
  }
  INST_state2.METH_write((tUInt8)1u);
}

void MOD_mkTbGCD::RL_r_recv_gcd2()
{
  tUInt8 DEF_NOT_IF_gcd_x_EQ_0_THEN_gcd_y_ELSE_gcd_x_7_EQ_1_3___d34;
  tUInt8 DEF_IF_gcd_x_EQ_0_THEN_gcd_y_ELSE_gcd_x_7_EQ_1___d33;
  tUInt32 DEF_signed_1___d35;
  DEF_signed_1___d35 = 1u;
  DEF_signed_0___d21 = 0u;
  DEF_finalR_res__h684 = INST_gcd_y.METH_read();
  DEF_finalR_res__h688 = INST_gcd_x.METH_read();
  DEF_gcd_x_EQ_0___d6 = DEF_finalR_res__h688 == 0u;
  DEF_x__h705 = DEF_gcd_x_EQ_0___d6 ? DEF_finalR_res__h684 : DEF_finalR_res__h688;
  DEF_IF_gcd_x_EQ_0_THEN_gcd_y_ELSE_gcd_x_7_EQ_1___d33 = DEF_x__h705 == 1u;
  DEF_NOT_IF_gcd_x_EQ_0_THEN_gcd_y_ELSE_gcd_x_7_EQ_1_3___d34 = !DEF_IF_gcd_x_EQ_0_THEN_gcd_y_ELSE_gcd_x_7_EQ_1___d33;
  INST_gcd_output_valid.METH_write((tUInt8)0u);
  INST_gcd_input_valid.METH_write((tUInt8)0u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_IF_gcd_x_EQ_0_THEN_gcd_y_ELSE_gcd_x_7_EQ_1___d33)
      dollar_display(sim_hdl, this, "s,-32,32", &__str_literal_2, DEF_signed_0___d21, DEF_x__h705);
    if (DEF_IF_gcd_x_EQ_0_THEN_gcd_y_ELSE_gcd_x_7_EQ_1___d33)
      dollar_display(sim_hdl, this, "s", &__str_literal_3);
    if (DEF_IF_gcd_x_EQ_0_THEN_gcd_y_ELSE_gcd_x_7_EQ_1___d33)
      dollar_finish(sim_hdl, "32", 0u);
    if (DEF_NOT_IF_gcd_x_EQ_0_THEN_gcd_y_ELSE_gcd_x_7_EQ_1_3___d34)
      dollar_display(sim_hdl, this, "s,-32,32", &__str_literal_4, DEF_signed_1___d35, DEF_x__h705);
    if (DEF_NOT_IF_gcd_x_EQ_0_THEN_gcd_y_ELSE_gcd_x_7_EQ_1_3___d34)
      dollar_finish(sim_hdl, "32", 0u);
  }
}


/* Methods */


/* Reset routines */

void MOD_mkTbGCD::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_state2.reset_RST(ARG_rst_in);
  INST_state.reset_RST(ARG_rst_in);
  INST_gcd_y.reset_RST(ARG_rst_in);
  INST_gcd_x.reset_RST(ARG_rst_in);
  INST_gcd_output_valid.reset_RST(ARG_rst_in);
  INST_gcd_input_valid.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbGCD::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbGCD::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_gcd_input_valid.dump_state(indent + 2u);
  INST_gcd_output_valid.dump_state(indent + 2u);
  INST_gcd_x.dump_state(indent + 2u);
  INST_gcd_y.dump_state(indent + 2u);
  INST_state.dump_state(indent + 2u);
  INST_state2.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbGCD::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 26u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_gcd_stop", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_gcd_subtract", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_gcd_swap", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_r_recv_gcd", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_r_recv_gcd2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_r_send_gcd", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_r_send_gcd2", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_gcd_stop", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_gcd_subtract", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_gcd_swap", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_r_recv_gcd", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_r_recv_gcd2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_r_send_gcd", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_r_send_gcd2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "finalR_res__h684", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "finalR_res__h688", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "gcd_x_EQ_0___d6", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "signed_0___d21", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h705", 32u);
  num = INST_gcd_input_valid.dump_VCD_defs(num);
  num = INST_gcd_output_valid.dump_VCD_defs(num);
  num = INST_gcd_x.dump_VCD_defs(num);
  num = INST_gcd_y.dump_VCD_defs(num);
  num = INST_state.dump_VCD_defs(num);
  num = INST_state2.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbGCD::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbGCD &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbGCD::vcd_defs(tVCDDumpType dt, MOD_mkTbGCD &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_gcd_stop) != DEF_CAN_FIRE_RL_gcd_stop)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_gcd_stop, 1u);
	backing.DEF_CAN_FIRE_RL_gcd_stop = DEF_CAN_FIRE_RL_gcd_stop;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_gcd_subtract) != DEF_CAN_FIRE_RL_gcd_subtract)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_gcd_subtract, 1u);
	backing.DEF_CAN_FIRE_RL_gcd_subtract = DEF_CAN_FIRE_RL_gcd_subtract;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_gcd_swap) != DEF_CAN_FIRE_RL_gcd_swap)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_gcd_swap, 1u);
	backing.DEF_CAN_FIRE_RL_gcd_swap = DEF_CAN_FIRE_RL_gcd_swap;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_r_recv_gcd) != DEF_CAN_FIRE_RL_r_recv_gcd)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_r_recv_gcd, 1u);
	backing.DEF_CAN_FIRE_RL_r_recv_gcd = DEF_CAN_FIRE_RL_r_recv_gcd;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_r_recv_gcd2) != DEF_CAN_FIRE_RL_r_recv_gcd2)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_r_recv_gcd2, 1u);
	backing.DEF_CAN_FIRE_RL_r_recv_gcd2 = DEF_CAN_FIRE_RL_r_recv_gcd2;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_r_send_gcd) != DEF_CAN_FIRE_RL_r_send_gcd)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_r_send_gcd, 1u);
	backing.DEF_CAN_FIRE_RL_r_send_gcd = DEF_CAN_FIRE_RL_r_send_gcd;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_r_send_gcd2) != DEF_CAN_FIRE_RL_r_send_gcd2)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_r_send_gcd2, 1u);
	backing.DEF_CAN_FIRE_RL_r_send_gcd2 = DEF_CAN_FIRE_RL_r_send_gcd2;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_gcd_stop) != DEF_WILL_FIRE_RL_gcd_stop)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_gcd_stop, 1u);
	backing.DEF_WILL_FIRE_RL_gcd_stop = DEF_WILL_FIRE_RL_gcd_stop;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_gcd_subtract) != DEF_WILL_FIRE_RL_gcd_subtract)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_gcd_subtract, 1u);
	backing.DEF_WILL_FIRE_RL_gcd_subtract = DEF_WILL_FIRE_RL_gcd_subtract;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_gcd_swap) != DEF_WILL_FIRE_RL_gcd_swap)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_gcd_swap, 1u);
	backing.DEF_WILL_FIRE_RL_gcd_swap = DEF_WILL_FIRE_RL_gcd_swap;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_r_recv_gcd) != DEF_WILL_FIRE_RL_r_recv_gcd)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_r_recv_gcd, 1u);
	backing.DEF_WILL_FIRE_RL_r_recv_gcd = DEF_WILL_FIRE_RL_r_recv_gcd;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_r_recv_gcd2) != DEF_WILL_FIRE_RL_r_recv_gcd2)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_r_recv_gcd2, 1u);
	backing.DEF_WILL_FIRE_RL_r_recv_gcd2 = DEF_WILL_FIRE_RL_r_recv_gcd2;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_r_send_gcd) != DEF_WILL_FIRE_RL_r_send_gcd)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_r_send_gcd, 1u);
	backing.DEF_WILL_FIRE_RL_r_send_gcd = DEF_WILL_FIRE_RL_r_send_gcd;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_r_send_gcd2) != DEF_WILL_FIRE_RL_r_send_gcd2)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_r_send_gcd2, 1u);
	backing.DEF_WILL_FIRE_RL_r_send_gcd2 = DEF_WILL_FIRE_RL_r_send_gcd2;
      }
      ++num;
      if ((backing.DEF_finalR_res__h684) != DEF_finalR_res__h684)
      {
	vcd_write_val(sim_hdl, num, DEF_finalR_res__h684, 32u);
	backing.DEF_finalR_res__h684 = DEF_finalR_res__h684;
      }
      ++num;
      if ((backing.DEF_finalR_res__h688) != DEF_finalR_res__h688)
      {
	vcd_write_val(sim_hdl, num, DEF_finalR_res__h688, 32u);
	backing.DEF_finalR_res__h688 = DEF_finalR_res__h688;
      }
      ++num;
      if ((backing.DEF_gcd_x_EQ_0___d6) != DEF_gcd_x_EQ_0___d6)
      {
	vcd_write_val(sim_hdl, num, DEF_gcd_x_EQ_0___d6, 1u);
	backing.DEF_gcd_x_EQ_0___d6 = DEF_gcd_x_EQ_0___d6;
      }
      ++num;
      if ((backing.DEF_signed_0___d21) != DEF_signed_0___d21)
      {
	vcd_write_val(sim_hdl, num, DEF_signed_0___d21, 32u);
	backing.DEF_signed_0___d21 = DEF_signed_0___d21;
      }
      ++num;
      if ((backing.DEF_x__h705) != DEF_x__h705)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h705, 32u);
	backing.DEF_x__h705 = DEF_x__h705;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_gcd_stop, 1u);
      backing.DEF_CAN_FIRE_RL_gcd_stop = DEF_CAN_FIRE_RL_gcd_stop;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_gcd_subtract, 1u);
      backing.DEF_CAN_FIRE_RL_gcd_subtract = DEF_CAN_FIRE_RL_gcd_subtract;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_gcd_swap, 1u);
      backing.DEF_CAN_FIRE_RL_gcd_swap = DEF_CAN_FIRE_RL_gcd_swap;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_r_recv_gcd, 1u);
      backing.DEF_CAN_FIRE_RL_r_recv_gcd = DEF_CAN_FIRE_RL_r_recv_gcd;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_r_recv_gcd2, 1u);
      backing.DEF_CAN_FIRE_RL_r_recv_gcd2 = DEF_CAN_FIRE_RL_r_recv_gcd2;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_r_send_gcd, 1u);
      backing.DEF_CAN_FIRE_RL_r_send_gcd = DEF_CAN_FIRE_RL_r_send_gcd;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_r_send_gcd2, 1u);
      backing.DEF_CAN_FIRE_RL_r_send_gcd2 = DEF_CAN_FIRE_RL_r_send_gcd2;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_gcd_stop, 1u);
      backing.DEF_WILL_FIRE_RL_gcd_stop = DEF_WILL_FIRE_RL_gcd_stop;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_gcd_subtract, 1u);
      backing.DEF_WILL_FIRE_RL_gcd_subtract = DEF_WILL_FIRE_RL_gcd_subtract;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_gcd_swap, 1u);
      backing.DEF_WILL_FIRE_RL_gcd_swap = DEF_WILL_FIRE_RL_gcd_swap;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_r_recv_gcd, 1u);
      backing.DEF_WILL_FIRE_RL_r_recv_gcd = DEF_WILL_FIRE_RL_r_recv_gcd;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_r_recv_gcd2, 1u);
      backing.DEF_WILL_FIRE_RL_r_recv_gcd2 = DEF_WILL_FIRE_RL_r_recv_gcd2;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_r_send_gcd, 1u);
      backing.DEF_WILL_FIRE_RL_r_send_gcd = DEF_WILL_FIRE_RL_r_send_gcd;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_r_send_gcd2, 1u);
      backing.DEF_WILL_FIRE_RL_r_send_gcd2 = DEF_WILL_FIRE_RL_r_send_gcd2;
      vcd_write_val(sim_hdl, num++, DEF_finalR_res__h684, 32u);
      backing.DEF_finalR_res__h684 = DEF_finalR_res__h684;
      vcd_write_val(sim_hdl, num++, DEF_finalR_res__h688, 32u);
      backing.DEF_finalR_res__h688 = DEF_finalR_res__h688;
      vcd_write_val(sim_hdl, num++, DEF_gcd_x_EQ_0___d6, 1u);
      backing.DEF_gcd_x_EQ_0___d6 = DEF_gcd_x_EQ_0___d6;
      vcd_write_val(sim_hdl, num++, DEF_signed_0___d21, 32u);
      backing.DEF_signed_0___d21 = DEF_signed_0___d21;
      vcd_write_val(sim_hdl, num++, DEF_x__h705, 32u);
      backing.DEF_x__h705 = DEF_x__h705;
    }
}

void MOD_mkTbGCD::vcd_prims(tVCDDumpType dt, MOD_mkTbGCD &backing)
{
  INST_gcd_input_valid.dump_VCD(dt, backing.INST_gcd_input_valid);
  INST_gcd_output_valid.dump_VCD(dt, backing.INST_gcd_output_valid);
  INST_gcd_x.dump_VCD(dt, backing.INST_gcd_x);
  INST_gcd_y.dump_VCD(dt, backing.INST_gcd_y);
  INST_state.dump_VCD(dt, backing.INST_state);
  INST_state2.dump_VCD(dt, backing.INST_state2);
}
